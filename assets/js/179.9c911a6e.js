(window.webpackJsonp=window.webpackJsonp||[]).push([[179],{422:function(t,e,a){"use strict";a.r(e);var s=a(1),n=Object(s.a)({},function(){var t=this,e=t.$createElement,a=t._self._c||e;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("h1",{attrs:{id:"regex-in-js-how-you-can-learn-it-and-learn-to-like-it"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#regex-in-js-how-you-can-learn-it-and-learn-to-like-it","aria-hidden":"true"}},[t._v("#")]),t._v(" Regex in JS - how YOU can learn it and learn to like it")]),t._v(" "),a("blockquote",[a("p",[t._v("I'm writing this to my future self. In fact, a lot of my articles are to my future self that forgot everything about how to do something. RegEx, Regular Expressions is a really powerful tool in our toolbox. Sadly we are referring to it as black magic, the devil and other charming things. It doesn't have to be like that. RegEx is different from normal programming for sure but it is also something that's really really powerful. Let's learn how it works and how to actually use it and apply it to everyday problems that you recognize.")])]),t._v(" "),a("p",[t._v("TLDR; Is this long? Yes but it does go through the major constructs in RegEx. Also, I have some nice recipes at the end on how to do things like RegEx for email, passwords, date format conversions and how to process URLs. If you have never worked with RegEx before or you struggle to see past all that weird magic - this is for you. Happy reading ðŸ˜ƒ")]),t._v(" "),a("h2",{attrs:{id:"references"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#references","aria-hidden":"true"}},[t._v("#")]),t._v(" References")]),t._v(" "),a("p",[t._v("There are some great resources out there for RegEx that I consult regularly. Take the time to read them. Sometimes they explain how RegEx is processed and can explain why the "),a("em",[t._v("magic")]),t._v(" happens:")]),t._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"https://www.regular-expressions.info/tutorialcnt.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("Regular Expressions info"),a("OutboundLink")],1),t._v("\nA good site covering a lot of RegEx info.")]),t._v(" "),a("li",[a("a",{attrs:{href:"https://developer.mozilla.org/en-US/docs/Web/JavaScript/Guide/Regular_Expressions",target:"_blank",rel:"noopener noreferrer"}},[t._v("Mozillas doc pages on RegEx"),a("OutboundLink")],1),t._v("\nGood site, in-depth explanations with examples")]),t._v(" "),a("li",[a("a",{attrs:{href:"https://javascript.info/regexp-groups",target:"_blank",rel:"noopener noreferrer"}},[t._v("JavaScript info"),a("OutboundLink")],1),t._v("\nSome of the best explanations I've seen on RegEx groups.")]),t._v(" "),a("li",[a("a",{attrs:{href:"https://2ality.com/2017/05/regexp-named-capture-groups.html",target:"_blank",rel:"noopener noreferrer"}},[t._v("Named groups"),a("OutboundLink")],1)]),t._v(" "),a("li",[a("a",{attrs:{href:"https://docs.microsoft.com/en-us/dotnet/standard/base-types/regular-expression-language-quick-reference?wt.mc_id=academic-0000-chnoring",target:"_blank",rel:"noopener noreferrer"}},[t._v("Regular Expression docs"),a("OutboundLink")],1),t._v("\nEven though this is a .NET guide the Regular Expression info is quite general and applicable")])]),t._v(" "),a("h2",{attrs:{id:"how-to-practice"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#how-to-practice","aria-hidden":"true"}},[t._v("#")]),t._v(" How to practice")]),t._v(" "),a("ul",[a("li",[a("p",[a("strong",[t._v("Node.js REPL")]),t._v(", If you have Node.js installed I recommend just typing "),a("code",[t._v("node")]),t._v(" in the terminal. This will start the REPL, it's a great way to test patterns")])]),t._v(" "),a("li",[a("p",[a("strong",[t._v("JavaScript REPL")]),t._v(", this is a VS Code extension that evaluates what you type. You will get instant feedback on results")])]),t._v(" "),a("li",[a("p",[a("strong",[t._v("Browser")]),t._v(", pulling up Dev Tools in your browser and using the Console will work fine as well")])]),t._v(" "),a("li",[a("p",[a("a",{attrs:{href:"https://regex101.com/",target:"_blank",rel:"noopener noreferrer"}},[t._v("RegEx 101"),a("OutboundLink")],1),t._v("\nGreat sandbox environment. Thanks for tip Lukasz ðŸ˜ƒ")])])]),t._v(" "),a("h2",{attrs:{id:"regular-expressions"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#regular-expressions","aria-hidden":"true"}},[t._v("#")]),t._v(" Regular Expressions")]),t._v(" "),a("p",[t._v("Regular Expressions or RegEx is about pattern matching. A lot of what we do is really about pattern matching if we think about it. RegEx is really good at matching patterns and extracting values from found patterns. So what kind of problems can we solve?")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("URL")]),t._v(", a URL contains a lot of interesting information like "),a("code",[t._v("hostname")]),t._v(", "),a("code",[t._v("route")]),t._v(", "),a("code",[t._v("port")]),t._v(", "),a("code",[t._v("route parameters")]),t._v(" and "),a("code",[t._v("query parameters")]),t._v(". We want to be able to extract this information but also validate the correctness.")]),t._v(" "),a("li",[a("strong",[t._v("Password")]),t._v(", the longer the password the better, is usually what we want. There are other dimensions as well like complexity. With complexity, we mean our password should contain for example numbers, special characters and a lot more.")]),t._v(" "),a("li",[a("strong",[t._v("Find and extract data")]),t._v(", having the ability to find data on a web page, for example, can be made really easy using a couple of well written Regular Expressions. There is actually a whole category of computer programs dedicated to this called "),a("em",[t._v("screen scrapers")]),t._v(".")])]),t._v(" "),a("p",[t._v("A regular expression is created either like this:")]),t._v(" "),a("div",{staticClass:"language-javascript line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{pre:!0,attrs:{class:"token regex"}},[t._v("/pattern/")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br")])]),a("p",[t._v("It starts and ends with "),a("code",[t._v("/")]),t._v(".")]),t._v(" "),a("p",[t._v("Or like this where we create an object from the "),a("code",[t._v("RegEx")]),t._v(" class:")]),t._v(" "),a("div",{staticClass:"language-javascript line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("new")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("RegEx")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token regex"}},[t._v("/pattern/")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br")])]),a("h2",{attrs:{id:"methods"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#methods","aria-hidden":"true"}},[t._v("#")]),t._v(" Methods")]),t._v(" "),a("p",[t._v("There are a few different methods meant for different types of usage. Learning to use the correct method is important.")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("exec()")]),t._v(", Executes a search for a match in a string. It returns an array of information or "),a("code",[t._v("null")]),t._v(" on a mismatch.")]),t._v(" "),a("li",[a("code",[t._v("test()")]),t._v(", tests for a match in string, answers with "),a("code",[t._v("true")]),t._v(" or "),a("code",[t._v("false")])]),t._v(" "),a("li",[a("code",[t._v("match()")]),t._v(", Returns an array containing all of the matches, including capturing groups, or "),a("code",[t._v("null")]),t._v(" if no match is found.")]),t._v(" "),a("li",[a("code",[t._v("matchAll()")]),t._v(", Returns an iterator containing all of the matches, including capturing groups.")]),t._v(" "),a("li",[a("code",[t._v("search()")]),t._v(", Tests for a match in a string. It returns the index of the match, or -1 if the search fails.")]),t._v(" "),a("li",[a("code",[t._v("replace()")]),t._v(", Executes a search for a match in a string, and replaces the matched substring with a replacement substring.")]),t._v(" "),a("li",[a("code",[t._v("split()")]),t._v(", Uses a regular expression or a fixed string to break a string into an array of substrings.")])]),t._v(" "),a("p",[t._v("Let's show some examples given the above methods.")]),t._v(" "),a("h3",{attrs:{id:"test-test-string-for-true-false"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#test-test-string-for-true-false","aria-hidden":"true"}},[t._v("#")]),t._v(" "),a("code",[t._v("test()")]),t._v(", test string for true/false")]),t._v(" "),a("p",[t._v("Let's look at an example using "),a("code",[t._v("test()")]),t._v(":")]),t._v(" "),a("div",{staticClass:"language-javascript line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{pre:!0,attrs:{class:"token regex"}},[t._v("/\\w+/")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("test")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'abc123'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// true")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br")])]),a("p",[t._v("Above we are testing the string "),a("code",[t._v("abc123")]),t._v(" for all alphabetic characters "),a("code",[t._v("\\w+")]),t._v(" and we are answering the question, do you contain alphabetic characters.")]),t._v(" "),a("h3",{attrs:{id:"match-find-matches"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#match-find-matches","aria-hidden":"true"}},[t._v("#")]),t._v(" "),a("code",[t._v("match()")]),t._v(", find matches")]),t._v(" "),a("p",[t._v("Let's look at an example:")]),t._v(" "),a("div",{staticClass:"language-javascript line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'orders/items'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("match")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token regex"}},[t._v("/\\w+/")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// [ 'orders', groups: undefined, index: 0, input ] ")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br")])]),a("p",[t._v("The above array response tells us we are able to match "),a("code",[t._v("orders")]),t._v(" with our pattern "),a("code",[t._v("\\w+")]),t._v(". We didn't capture any groups as indicated by "),a("code",[t._v("groups:undefined")]),t._v(" and our match was found at "),a("code",[t._v("index:0")]),t._v(". If we wanted to match all the alphabetic characters in the string we would have needed to use a flag "),a("code",[t._v("g")]),t._v(". "),a("code",[t._v("g")]),t._v(" indicates a "),a("em",[t._v("global match")]),t._v(", like so:")]),t._v(" "),a("div",{staticClass:"language-javascript line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'orders/items'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("match")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token regex"}},[t._v("/\\w+/g")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// ['orders', 'items']")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br")])]),a("p",[a("strong",[t._v("Groups")])]),t._v(" "),a("p",[t._v("We also have the concept of groups. To start using groups we need to wrap our pattern in parenthesis like so:")]),t._v(" "),a("div",{staticClass:"language-javascript line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" matchedGroup "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'orders/114'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("match")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token regex"}},[t._v("/(?<order>\\d+)/")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// [114, 114, groups: { order: 114 }]  ")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br")])]),a("p",[t._v("The usage of the construct "),a("code",[t._v("?<order>")]),t._v("  creates a so-called named group.")]),t._v(" "),a("h2",{attrs:{id:"flags"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#flags","aria-hidden":"true"}},[t._v("#")]),t._v(" Flags")]),t._v(" "),a("p",[t._v("There are different flags. Let's list some of them. All flags are added at the end of the Regular expression. So a typical usage looks like this:")]),t._v(" "),a("div",{staticClass:"language-javascript line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" re "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("pattern"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("flags"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br")])]),a("ul",[a("li",[a("code",[t._v("g")]),t._v(", what you are saying is that you want to match the entire string, not just the first occurrence")]),t._v(" "),a("li",[a("code",[t._v("i")]),t._v(", this means we want a case insensitive matching")])]),t._v(" "),a("h2",{attrs:{id:"assertions"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#assertions","aria-hidden":"true"}},[t._v("#")]),t._v(" Assertions")]),t._v(" "),a("p",[t._v("There are different types of assertions:")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("Boundary")]),t._v(", this is for matching things in the beginning and the end of a word")]),t._v(" "),a("li",[a("strong",[t._v("Other assertions")]),t._v(", here we are talking about look ahead, look behind and conditional assertions")])]),t._v(" "),a("p",[t._v("Let's look at some examples:")]),t._v(" "),a("div",{staticClass:"language-javascript line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{pre:!0,attrs:{class:"token regex"}},[t._v("/^test/")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("test")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'test123'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// true")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br")])]),a("p",[t._v("Above we are testing the string "),a("code",[t._v("test123")]),t._v(" whether it starts with "),a("code",[t._v("^")]),t._v(" the word "),a("code",[t._v("test")]),t._v(".")]),t._v(" "),a("p",[t._v("The reverse would look like this:")]),t._v(" "),a("div",{staticClass:"language-javascript line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{pre:!0,attrs:{class:"token regex"}},[t._v("/test$/")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("test")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'123test'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br")])]),a("h2",{attrs:{id:"character-classes"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#character-classes","aria-hidden":"true"}},[t._v("#")]),t._v(" Character classes")]),t._v(" "),a("p",[t._v("Character classes are about different kinds of characters like letters and digits. Let's list some of them:")]),t._v(" "),a("ul",[a("li",[a("code",[t._v(".")]),t._v(", matches any single character except for line terminators like "),a("code",[t._v("\\n")]),t._v(" or "),a("code",[t._v("\\r")])]),t._v(" "),a("li",[a("code",[t._v("\\d")]),t._v(", matches digits, equivalent with "),a("code",[t._v("[0-9]")])]),t._v(" "),a("li",[a("code",[t._v("\\D")]),t._v(", this is a negation of matching a digit. So anything, not a digit. Equivalent to "),a("code",[t._v("^[0-9]")])]),t._v(" "),a("li",[a("code",[t._v("\\w")]),t._v(", matches any alphabetic character including "),a("code",[t._v("_")]),t._v(". Equivalent with "),a("code",[t._v("[a-zA-Z0-9_]")])]),t._v(" "),a("li",[a("code",[t._v("\\W")]),t._v(", a negation of the above. Matches a "),a("code",[t._v("%")]),t._v(" for example")]),t._v(" "),a("li",[a("code",[t._v("\\s")]),t._v(", matches white space characters")]),t._v(" "),a("li",[a("code",[t._v("\\t")]),t._v(", matches a tab")]),t._v(" "),a("li",[a("code",[t._v("\\r")]),t._v(", matches a carriage return")]),t._v(" "),a("li",[a("code",[t._v("\\n")]),t._v(", matches a line feed")]),t._v(" "),a("li",[a("code",[t._v("\\")]),t._v(", escape character. It can be used to match a "),a("code",[t._v("/")]),t._v(" like so "),a("code",[t._v("\\/")]),t._v(". Also used to give characters special meaning")])]),t._v(" "),a("h2",{attrs:{id:"quantifiers"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#quantifiers","aria-hidden":"true"}},[t._v("#")]),t._v(" Quantifiers")]),t._v(" "),a("p",[t._v("Quantifiers is about the number of characters to match:")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("*")]),t._v(", 0 to many characters")]),t._v(" "),a("li",[a("code",[t._v("+")]),t._v(", 1 to many characters")]),t._v(" "),a("li",[a("code",[t._v("{n}")]),t._v(", match n characters")]),t._v(" "),a("li",[a("code",[t._v("{n,}")]),t._v(", match >= n characters")]),t._v(" "),a("li",[a("code",[t._v("{n,m}")]),t._v(", match >= n && =< m characters")]),t._v(" "),a("li",[a("code",[t._v("?")]),t._v(", non-greedy matching")])]),t._v(" "),a("p",[t._v("Let's look at some examples")]),t._v(" "),a("div",{staticClass:"language-javascript line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{pre:!0,attrs:{class:"token regex"}},[t._v("/\\w*/")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("test")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'abc123'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// true")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("\\w"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("test")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("''")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// true. * = 0 to many")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br")])]),a("p",[t._v("In the next example we use the "),a("code",[t._v("?")]),t._v(":")]),t._v(" "),a("div",{staticClass:"language-javascript line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{pre:!0,attrs:{class:"token regex"}},[t._v("/\\/products\\/?/")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("test")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'/products'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("\\"),a("span",{pre:!0,attrs:{class:"token regex"}},[t._v("/products\\/?/")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("test")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'/products/'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br")])]),a("p",[t._v("Above we can see how the usage of "),a("code",[t._v("?")]),t._v(" makes the ending "),a("code",[t._v("/")]),t._v(" optional when we use this type of matching "),a("code",[t._v("\\/?")]),t._v(".")]),t._v(" "),a("h2",{attrs:{id:"demo"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#demo","aria-hidden":"true"}},[t._v("#")]),t._v(" DEMO")]),t._v(" "),a("p",[t._v("Ok, that's a lot of theory mixed with some examples. Let's look at some realistic matching next, matchings that we would actually use in production.")]),t._v(" "),a("p",[t._v("If you are using JavaScript on the backend you are probably already using something frameworks like Express, Koa or maybe Nest.js. Do you know what these frameworks do for you in terms of route matching, parameters and more? Well, it's about time to find out.")]),t._v(" "),a("h3",{attrs:{id:"matching-a-route"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#matching-a-route","aria-hidden":"true"}},[t._v("#")]),t._v(" Matching a route")]),t._v(" "),a("p",[t._v("A route as simple as "),a("code",[t._v("/products")]),t._v(", how do we match it?. Well, we know our URL should contain that part with that so writing a RegEx for that is quite simple. Let's also account for that some will type in "),a("code",[t._v("/products")]),t._v(" and some other will type "),a("code",[t._v("/products/")]),t._v(":")]),t._v(" "),a("div",{staticClass:"language-javascript line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{pre:!0,attrs:{class:"token regex"}},[t._v("/\\products\\/?$/")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("test")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'/products'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br")])]),a("p",[t._v("The above RegEx fulfills all our needs from matching "),a("code",[t._v("/")]),t._v(" with "),a("code",[t._v("\\/")]),t._v("to matching an optional "),a("code",[t._v("/")]),t._v(" at the end with "),a("code",[t._v("\\/?")]),t._v(".")]),t._v(" "),a("h3",{attrs:{id:"extract-match-route-parameter"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#extract-match-route-parameter","aria-hidden":"true"}},[t._v("#")]),t._v(" Extract/match route parameter")]),t._v(" "),a("p",[t._v("Ok, let's take a similar case. "),a("code",[t._v("/products/112")]),t._v(". The route "),a("code",[t._v("/products")]),t._v(" with a number at the end. Let's start to see if the incoming route matches:")]),t._v(" "),a("div",{staticClass:"language-javascript line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{pre:!0,attrs:{class:"token regex"}},[t._v("/\\/products\\/\\d+$/")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("test")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'/products/112'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// true")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("/")]),t._v("\\"),a("span",{pre:!0,attrs:{class:"token regex"}},[t._v("/products\\/\\d+$/")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("test")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'/products/'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// false")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br")])]),a("p",[t._v("To extract the route parameter we can type like this:")]),t._v(" "),a("div",{staticClass:"language-javascript line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" productId"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'/products/112'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("match")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token regex"}},[t._v("/\\/products\\/(\\d+)/")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// productId = 112")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br")])]),a("h3",{attrs:{id:"match-extract-several-route-parameters"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#match-extract-several-route-parameters","aria-hidden":"true"}},[t._v("#")]),t._v(" Match/extract Several route parameters")]),t._v(" "),a("p",[t._v("Ok, let's say you have a route looking like this "),a("code",[t._v("/orders/113/items/55")]),t._v(". This roughly translates to order with id "),a("code",[t._v("113")]),t._v(" and with order item id "),a("code",[t._v("55")]),t._v(". First we want to ensure that our incoming URL matches so let's look at the RegEx for that:")]),t._v(" "),a("div",{staticClass:"language-javascript line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{pre:!0,attrs:{class:"token regex"}},[t._v("/\\orders\\/\\d+\\/items\\/\\d+\\/?/")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("test")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'/orders/99/items/22'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// true")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br")])]),a("p",[t._v("The above RegEx reads as the following, match "),a("code",[t._v("/orders/[1-n digits]/items/[1-n digits][optional /]")])]),t._v(" "),a("p",[t._v("Now we know we are able to match the above route. Let's grab those parameters next. We can do so using named groups:")]),t._v(" "),a("div",{staticClass:"language-javascript line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" groups"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v(" orderId"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" itemId "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'/orders/99/items/22'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("match")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token regex"}},[t._v("/(?<orderId>\\d+)\\/items\\/(?<itemId>\\d+)\\/?/")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// orderId = 99")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// items = 22")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br")])]),a("p",[t._v("The above expression introduces groups by creating named groups "),a("code",[t._v("orderId")]),t._v(" and "),a("code",[t._v("itemId")]),t._v(" with constructs "),a("code",[t._v("(?<orderId>\\d+)")]),t._v(" and "),a("code",[t._v("(?<itemId>\\d+)")]),t._v(" respectively. The pattern is very similar to the one used with the "),a("code",[t._v("test()")]),t._v(" method.")]),t._v(" "),a("h3",{attrs:{id:"route-classifier"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#route-classifier","aria-hidden":"true"}},[t._v("#")]),t._v(" Route classifier")]),t._v(" "),a("p",[t._v("I'm sure you've seen how a route has been split up into several parts like "),a("code",[t._v("protocol")]),t._v(", "),a("code",[t._v("host")]),t._v(", "),a("code",[t._v("route")]),t._v(", "),a("code",[t._v("port")]),t._v(" and "),a("code",[t._v("query parameters")]),t._v(".")]),t._v(" "),a("p",[t._v("That's quite easy to do. Let's assume we are looking at a URL looking like this "),a("code",[t._v("http://localhost:8000/products?page=1&pageSize=20")]),t._v(". We want to parse that URL and ideally get something nice to work with, like this:")]),t._v(" "),a("div",{staticClass:"language-javascript line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  protocol"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'http'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  host"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'localhost'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  route"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'/products?page=1&pageSize=20'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v("\n  port"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("8000")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br")])]),a("p",[t._v("How do we get there? Well, what you are looking at follows a very predictable pattern and RegEx is the "),a("em",[t._v("Mjolnir of Hammers")]),t._v(" when it comes to pattern matching. Let's do this ðŸ˜ƒ")]),t._v(" "),a("div",{staticClass:"language-javascript line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" http "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'http://localhost:8000/products?page=1&pageSize=20'")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("match")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token regex"}},[t._v("/(?<protocol>\\w+):\\/{2}(?<host>\\w+):(?<port>\\d+)(?<route>.*)/")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// http.groups = { protocol: 'http', host: 'localhost',  port: 8000, route: '?page=1&pageSize=20'   }")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br")])]),a("p",[t._v("Let's take the above and break it down:")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("(?<protocol>\\w+):")]),t._v(", this matches n number of alphabetic characters that ends with a "),a("code",[t._v(":")]),t._v(". Additionally, it's getting placed into the named group "),a("code",[t._v("protocol")])]),t._v(" "),a("li",[a("code",[t._v("\\/{2}")]),t._v(", this just says we have "),a("code",[t._v("//")]),t._v(", typically after "),a("code",[t._v("http://")]),t._v(".")]),t._v(" "),a("li",[a("code",[t._v("(?<host>\\w+):")]),t._v(", this matches n number of alphabetic characters that ends with a "),a("code",[t._v(":")]),t._v(", so in this case, it matches "),a("code",[t._v("localhost")]),t._v(". Additionally, it's getting placed into the named group "),a("code",[t._v("host")]),t._v(".")]),t._v(" "),a("li",[a("code",[t._v("(?<port>\\d+)")]),t._v(", this matches some digits that follow after the host which would be the port. Additionally, it's getting placed into the named group "),a("code",[t._v("port")]),t._v(".")]),t._v(" "),a("li",[a("code",[t._v("(?<route>.*)")]),t._v(", lastly, we have the route matching which just matches any characters which would ensure we get the part "),a("code",[t._v("?page=1&pageSize=20")]),t._v(". Additionally, it's getting placed into the named group "),a("code",[t._v("route")]),t._v(".")])]),t._v(" "),a("p",[t._v("To parse out the query parameters we just need a RegEx and one call to "),a("code",[t._v("reduce()")]),t._v(", like so:")]),t._v(" "),a("div",{staticClass:"language-javascript line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" queryMatches "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" http"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("groups"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("route"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("match")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token regex"}},[t._v("/(\\w+=\\w+)/g")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// ['page=1', 'pageSize=20']")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" queryParams "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" queryMatches"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("reduce")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[t._v("acc"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" curr")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=>")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("key"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" value"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" curr"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("split")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'='")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n  arr"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("...")]),t._v("arr"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("key"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(":")]),t._v(" value "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// { page: 1, pageSize : 20 }")]),t._v("\n\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br")])]),a("p",[t._v("Above we are working with the response from our first pattern matching "),a("code",[t._v("http.groups.route")]),t._v(". We are now constructing a pattern that would match the following "),a("code",[t._v("[any alphabetic character]=[any alphabetic character]")]),t._v(". Additionally, because we have a global match "),a("code",[t._v("g")]),t._v(", we get an array of responses. This corresponds to all of our query parameters. Lastly, we call "),a("code",[t._v("reduce()")]),t._v(" and turn the array into an object.")]),t._v(" "),a("h3",{attrs:{id:"password-complexity"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#password-complexity","aria-hidden":"true"}},[t._v("#")]),t._v(" Password complexity")]),t._v(" "),a("p",[t._v("The thing with password complexity is that it comes with different criteria like:")]),t._v(" "),a("ul",[a("li",[a("strong",[t._v("length")]),t._v(", it should be more than n characters and maybe less than m characters")]),t._v(" "),a("li",[a("strong",[t._v("numbers")]),t._v(", should contain a number")]),t._v(" "),a("li",[a("strong",[t._v("special character")]),t._v(", should contain special characters")])]),t._v(" "),a("p",[t._v("Are we safe then? Well safer, don't forget 2FA, on an app, not your phone number.")]),t._v(" "),a("p",[t._v("Let's look at a RegEx for this:")]),t._v(" "),a("div",{staticClass:"language-javascript line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// checking for at least 1 number")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" pwd "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token regex"}},[t._v("/\\d+/")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("test")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'password1'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// checking for at least 8 characters")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" pwdNCharacters "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token regex"}},[t._v("/\\w{8,}/")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("test")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'password1'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// checking for at least one of &, ?, !, -")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" specialCharacters "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token regex"}},[t._v("/&|\\?|\\!|\\-+/")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("test")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'password1-'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br"),a("span",{staticClass:"line-number"},[t._v("9")]),a("br")])]),a("p",[t._v("As you can see I construct each requirement as its own pattern matching. You need to take your password through each of the matchings to ensure it's valid.")]),t._v(" "),a("h3",{attrs:{id:"the-perfect-date"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#the-perfect-date","aria-hidden":"true"}},[t._v("#")]),t._v(" The perfect date")]),t._v(" "),a("p",[t._v("In my current job I encounter colleagues who all think their date format is the once the rest of us should use. Currently, that means my poor brain has to deal with:")]),t._v(" "),a("div",{staticClass:"language-javascript line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// YY/MM/DD , European ISO standard")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// DD/MM/YY , British")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("// MM/DD/YY,  American, US")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br")])]),a("p",[t._v("So you can imagine I need to know the nationality of the one who sent me the email every time I get an email with a date in it. It's painful ðŸ˜ƒ. So let's build a RegEx so we can easily swap this as needed.")]),t._v(" "),a("p",[t._v("Let's say we get a US date, like so "),a("code",[t._v("MM/DD/YY")]),t._v(". We want to extract the important parts and swap the date so someone European/British can understand this. Let's also assume that our input below is american:")]),t._v(" "),a("div",{staticClass:"language-javascript line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" toBritish "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'12/22/20'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("replace")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token regex"}},[t._v("/(?<month>\\d{2})\\/(?<day>\\d{2})\\/(?<year>\\d{2})/")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'$2/$1/$3'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" toEuropeanISO "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'12/22/20'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("replace")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token regex"}},[t._v("/(?<month>\\d{2})\\/(?<day>\\d{2})\\/(?<year>\\d{2})/")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'$3/$1/$2'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br")])]),a("p",[t._v("Above we are able to do just that. In our first parameter to "),a("code",[t._v("replace()")]),t._v(" we give it our RegEx. Our second parameter is how we want to swap it. For a British date, we just swap month and day and everybody is happy. For a European date, we need to do a bit more as we want it to start with a year, followed month and then day.")]),t._v(" "),a("h3",{attrs:{id:"email"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#email","aria-hidden":"true"}},[t._v("#")]),t._v(" Email")]),t._v(" "),a("p",[t._v("Ok so for email we need to think about a few things")]),t._v(" "),a("ul",[a("li",[a("code",[t._v("@")]),t._v(", should have an "),a("code",[t._v("@")]),t._v(" character somewhere in the middle")]),t._v(" "),a("li",[a("code",[t._v("first name")]),t._v(", people can have long names, with and without a dash/hyphen. Which means people can be called, "),a("code",[t._v("per")]),t._v(", "),a("code",[t._v("per-albin")]),t._v(" and so on")]),t._v(" "),a("li",[a("code",[t._v("last name")]),t._v(", they need a last name, or the email is just a last name or a first name")]),t._v(" "),a("li",[a("code",[t._v("domain")]),t._v(", we need to white list several domains like "),a("code",[t._v(".com")]),t._v(", "),a("code",[t._v(".gov")]),t._v(", "),a("code",[t._v(".edu")])])]),t._v(" "),a("p",[t._v("With all that in mind, I give you the mother of all RegEx:")]),t._v(" "),a("div",{staticClass:"language-javascript line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-javascript"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("var")]),t._v(" isEmail "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token regex"}},[t._v("/^(\\w+\\-?\\w+\\.)*(\\w+){1}@\\w+\\.(\\w+\\.)*(edu|gov|com)$/")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[t._v("test")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[t._v("'per-albin.hansson@sweden.gov'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br")])]),a("p",[t._v("Let's break this down, cause it's wordy:")]),t._v(" "),a("ol",[a("li",[a("code",[t._v("^")]),t._v(", this means it starts with.")]),t._v(" "),a("li",[a("code",[t._v("(\\w+\\-?\\w+\\.)*")]),t._v(", this one means a word with our without "),a("code",[t._v("-")]),t._v(" as we have the pattern "),a("code",[t._v("-?")]),t._v(", and ending with a "),a("code",[t._v(".")]),t._v(", so "),a("code",[t._v("per.")]),t._v(", "),a("code",[t._v("per-albin.")]),t._v(". Also, we end with "),a("code",[t._v("*")]),t._v(" so 0 to many of that one.")]),t._v(" "),a("li",[a("code",[t._v("(\\w+){1}")]),t._v(", this one means exactly one word like an email consisting of just a last name or just a first name. This opens for for a combination of 1) + 2) so "),a("code",[t._v("per-albin.hansson")]),t._v(" or "),a("code",[t._v("per.hansson")]),t._v(" or 2) alone which would per or "),a("code",[t._v("hansson")]),t._v(".")]),t._v(" "),a("li",[a("code",[t._v("@")]),t._v(", we need to match one "),a("code",[t._v("@")]),t._v(" character")]),t._v(" "),a("li",[a("code",[t._v("\\w+\\.")]),t._v(", here we are matching a name that ends in ., e.g "),a("code",[t._v("sweden.")])]),t._v(" "),a("li",[a("code",[t._v("(\\w+\\.)*")]),t._v(", here we are opening up for a number of subdomain or no one, given the "),a("code",[t._v("*")]),t._v(", e.g sthlm.region. etc.")]),t._v(" "),a("li",[a("code",[t._v("(edu|gov|com)")]),t._v(", domain name, here we are listing allowed domains to be "),a("code",[t._v("edu")]),t._v(", "),a("code",[t._v("gov")]),t._v(" or "),a("code",[t._v("com")])]),t._v(" "),a("li",[a("code",[t._v("$")]),t._v(", needs to end with, this means we ensure that someone doesn't input some crap after the domain name")])]),t._v(" "),a("h2",{attrs:{id:"summary"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#summary","aria-hidden":"true"}},[t._v("#")]),t._v(" Summary")]),t._v(" "),a("p",[t._v("You got all the way here. We really covered a lot of ground on the topic of RegEx. Hopefully, you now have a better grasp of what components it consists of. Additionally, I hope the real-world examples made you realize that you might just not need to install that extra node module. Hopefully, you will with a little practice feel like RegEx is useful and can really make your code a whole lot shorter, more elegant and even readable. Yes, I said readable. RegEx is quite readable once you get the hang of how things are being evaluated. You will find that the more time you spend on it the more it pays off. Stop trying to banish it back to a Demon dimension and give it a chance ðŸ˜ƒ")])])},[],!1,null,null,null);e.default=n.exports}}]);