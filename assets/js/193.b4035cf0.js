(window.webpackJsonp=window.webpackJsonp||[]).push([[193],{431:function(e,t,s){"use strict";s.r(t);var a=s(1),r=Object(a.a)({},function(){var e=this,t=e.$createElement,s=e._self._c||t;return s("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[s("p",[e._v("#Â Learn how YOU can build a Serverless GraphQL API on top of a Microservice")]),e._v(" "),s("p",[e._v("Follow me on "),s("a",{attrs:{href:"https://twitter.com/chris_noring",target:"_blank",rel:"noopener noreferrer"}},[e._v("Twitter"),s("OutboundLink")],1),e._v(", happy to take your suggestions on topics or improvements /Chris")]),e._v(" "),s("p",[s("img",{attrs:{src:"https://thepracticaldev.s3.amazonaws.com/i/65simd8ue5l3n04hgmzi.jpg",alt:""}})]),e._v(" "),s("blockquote",[s("p",[e._v("This is when we take our Microservices, our GraphQL API, host that in a Serverless app and bring it all to production. Yes, it's a 15 min read, but what you get for it is something you can build on for your own projects. It is worth the read and plenty of pictures on the way. I hope you stay with me ðŸ˜ƒ")])]),e._v(" "),s("p",[e._v("This is part of series:")]),e._v(" "),s("ul",[s("li",[s("a",{attrs:{href:"https://dev.to/azure/learn-how-you-can-build-a-serverless-graphql-api-on-top-of-a-microservice-architecture-233g",target:"_blank",rel:"noopener noreferrer"}},[e._v("Building Microservices and a GraphQL API, Part I"),s("OutboundLink")],1)]),e._v(" "),s("li",[e._v("Hosting the GraphQL API in a Serverless app and bring it all to the Cloud, part II, "),s("strong",[e._v("we are here")])])]),e._v(" "),s("p",[e._v("This is the second part of our GraphQL, Serverless, Docker and Microservices series. Up to this point we have created Microservices, Dockerized those and was able to use the URL from those services when we stitched together our GraphQL API. That's an accomplishment in itself, however, we are not happy with that. We want to go to production - we want to go to the Cloud.")]),e._v(" "),s("p",[e._v("I highly recommend reading the first part of the series, "),s("a",{attrs:{href:"https://dev.to/azure/learn-how-you-can-build-a-serverless-graphql-api-on-top-of-a-microservice-architecture-233g",target:"_blank",rel:"noopener noreferrer"}},[e._v("First part"),s("OutboundLink")],1)]),e._v(" "),s("p",[e._v("If you have, let's rock !")]),e._v(" "),s("p",[s("img",{attrs:{src:"https://thepracticaldev.s3.amazonaws.com/i/i9fz44ky7tonla33mw6k.gif",alt:""}})]),e._v(" "),s("h2",{attrs:{id:"the-plan"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#the-plan","aria-hidden":"true"}},[e._v("#")]),e._v(" The Plan")]),e._v(" "),s("p",[e._v("We've mentioned the plan in part I. But here it is again")]),e._v(" "),s("ol",[s("li",[s("strong",[e._v("Create")]),e._v(" microservices, part I")]),e._v(" "),s("li",[s("strong",[e._v("Dockerize")]),e._v(" services, part I")]),e._v(" "),s("li",[s("strong",[e._v("Create")]),e._v(" graphql api and have the resolve functions point to the url of each dockerized service, part I")]),e._v(" "),s("li",[s("strong",[e._v("Create")]),e._v(" a serverless function, "),s("strong",[e._v("this part")])]),e._v(" "),s("li",[s("strong",[e._v("Deploy")]),e._v(" the  our microservices to the Cloud, "),s("strong",[e._v("this part")])]),e._v(" "),s("li",[s("strong",[e._v("Add")]),e._v(" our graphql api to our serverless function, "),s("strong",[e._v("this part")])]),e._v(" "),s("li",[s("strong",[e._v("Deploy")]),e._v(" serverless function to the cloud, "),s("strong",[e._v("this part")])])]),e._v(" "),s("p",[e._v("The first three items have been completed in the first part of our services, now it's time to tackle the remaining four items")]),e._v(" "),s("h2",{attrs:{id:"resources"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#resources","aria-hidden":"true"}},[e._v("#")]),e._v(" Resources")]),e._v(" "),s("p",[e._v("You can definitely follow this guide without reading these links but learn more details on deploy options and how to build out Serverless or how to deploy your containers in Azure I recommend looking through these links:")]),e._v(" "),s("ul",[s("li",[s("a",{attrs:{href:"https://azure.microsoft.com/en-gb/free/?wt.mc_id=academic-0000-chnoring",target:"_blank",rel:"noopener noreferrer"}},[e._v("Free Azure Account"),s("OutboundLink")],1),e._v(" To be able to Deploy your services and host your Serverless function, you will need a free Azure account")]),e._v(" "),s("li",[s("a",{attrs:{href:"https://docs.microsoft.com/en-us/azure/container-instances/container-instances-quickstart?wt.mc_id=academic-0000-chnoring",target:"_blank",rel:"noopener noreferrer"}},[e._v("Deploy a container to Azure"),s("OutboundLink")],1),e._v("\nIt's always good to see all the available options when deploying a container to Azure")]),e._v(" "),s("li",[s("a",{attrs:{href:"https://dev.to/azure/all-your-containers-are-belong-to-usdeploying-to-microsoft-azure-7dm?wt.mc_id=academic-0000-chnoring",target:"_blank",rel:"noopener noreferrer"}},[e._v("All your containers are belong to us"),s("OutboundLink")],1),e._v("\nAn article I wrote on. Like the link above but explains a bit more")]),e._v(" "),s("li",[s("a",{attrs:{href:"https://docs.microsoft.com/en-US/azure/azure-functions/functions-create-first-function-vs-code?wt.mc_id=academic-0000-chnoring",target:"_blank",rel:"noopener noreferrer"}},[e._v("Create and Deploy an Azure function in VS Code"),s("OutboundLink")],1),e._v("\nThis shows how we can create an Azure Function in VS Code and deploy it to the Cloud")]),e._v(" "),s("li",[s("a",{attrs:{href:"https://docs.microsoft.com/en-us/azure/azure-functions/functions-create-first-azure-function-azure-cli?wt.mc_id=academic-0000-chnoring",target:"_blank",rel:"noopener noreferrer"}},[e._v("Create an Azure function using the CLI"),s("OutboundLink")],1),e._v("\nThe CLI is an excellent choice to create Azure functions with and also deploy with.")]),e._v(" "),s("li",[s("a",{attrs:{href:"https://dev.to/softchris/5-part-docker-series-beginner-to-master-3m1b?wt.mc_id=academic-0000-chnoring",target:"_blank",rel:"noopener noreferrer"}},[e._v("My 5 part series on Docker, if you need a Docker refresher"),s("OutboundLink")],1),e._v(" This is a 5 part primer on Docker")])]),e._v(" "),s("h2",{attrs:{id:"project-structure"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#project-structure","aria-hidden":"true"}},[e._v("#")]),e._v(" Project structure")]),e._v(" "),s("p",[e._v("Let's remind ourselves where we are with our project structure so we are on the same page moving forward. We should have the following:")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("/graphql-api\n  /products  // our product service\n  /reviews // our reviews service\n  /serverless // will contain our serverless function\n  docker-compose.yml\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br")])]),s("h2",{attrs:{id:"create-a-serverless-function"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#create-a-serverless-function","aria-hidden":"true"}},[e._v("#")]),e._v(" Create a serverless function")]),e._v(" "),s("p",[e._v("To create our Function we first need a "),s("code",[e._v("Function app")]),e._v(" to host it in. Before we get that far, let's ensure we've installed all the prerequisites we need. This looks a bit different on Mac and Windows. Let's start with Mac and open up a terminal and enter:")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("brew tap azure/functions\nbrew install azure-functions-core-tools\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br")])]),s("p",[e._v("If you are lacking "),s("code",[e._v("brew")]),e._v(", refer to this "),s("a",{attrs:{href:"https://brew.sh/",target:"_blank",rel:"noopener noreferrer"}},[e._v("link"),s("OutboundLink")],1),e._v(" to have it installed.")]),e._v(" "),s("p",[e._v("For Windows we just need Node.js installed and then we open up a terminal and enter:")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("npm install -g azure-functions-core-tools@2\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br")])]),s("p",[e._v("We also need to install a Visual Studio Code extension to make scaffolding, debugging and deployment of our Azure function a breeze, so let's do that next. Click the extension's icon in VS Code and look for "),s("code",[e._v("Azure Functions")]),e._v(" and select to install it.\n"),s("img",{attrs:{src:"https://thepracticaldev.s3.amazonaws.com/i/psz5ihp5kjyujpvq1qrq.png",alt:""}})]),e._v(" "),s("h3",{attrs:{id:"scaffold-a-project"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#scaffold-a-project","aria-hidden":"true"}},[e._v("#")]),e._v(" Scaffold a project")]),e._v(" "),s("p",[e._v("Our next step is to create an Azure App, we do so by pressing "),s("code",[e._v("COMMAND + SHIFT + P")]),e._v(" or "),s("code",[e._v("CTRL+SHIFT+P")]),e._v(" for Windows. This should bring up a menu looking like this:")]),e._v(" "),s("p",[s("img",{attrs:{src:"https://thepracticaldev.s3.amazonaws.com/i/whmkarb5duxry8b4er1u.png",alt:""}})]),e._v(" "),s("p",[e._v("Thereafter you select the indicated command above and you are now presented with the following below.")]),e._v(" "),s("p",[s("img",{attrs:{src:"https://thepracticaldev.s3.amazonaws.com/i/0v0iq5ul9x35rn09mkoo.png",alt:""}})]),e._v(" "),s("p",[e._v("You can select whatever folder you want but know that it will create a folder "),s("code",[e._v(".vscode")]),e._v(" in the workspace you are currently in. "),s("code",[e._v(".vscode")]),e._v(" contains a bunch of files making debugging of this project possible. I select the "),s("code",[e._v("serverless")]),e._v(" folder and I also ensure VS Code has opened that folder so that my "),s("code",[e._v(".vscode")]),e._v(" folder is created in the right place.")]),e._v(" "),s("p",[s("img",{attrs:{src:"https://thepracticaldev.s3.amazonaws.com/i/zcj2e414fd0npniv57db.png",alt:""}})]),e._v(" "),s("p",[e._v("We go with "),s("code",[e._v("Javascript")]),e._v(" this time. Next screen is to choose a trigger, that is, what event will lead to this code to be executed:")]),e._v(" "),s("p",[s("img",{attrs:{src:"https://thepracticaldev.s3.amazonaws.com/i/0razhjgzwkmqy5y4mrji.png",alt:""}})]),e._v(" "),s("p",[e._v("Next step is giving the Azure function a name. Yes, it not only creates an Azure app project for us but it also creates one function that it starts out with. We can always add more functions later if we wish.")]),e._v(" "),s("p",[s("img",{attrs:{src:"https://thepracticaldev.s3.amazonaws.com/i/8qz3rkncd0x57ixx163m.png",alt:""}})]),e._v(" "),s("p",[e._v("I choose the name "),s("code",[e._v("graphql")]),e._v(". There, just one more step, "),s("code",[e._v("Authorization level")]),e._v(". There are three ways to authorize the usage of our app, "),s("code",[e._v("Anonymous")]),e._v(", "),s("code",[e._v("Function")]),e._v(" and "),s("code",[e._v("Admin")]),e._v(". With "),s("code",[e._v("Anonymous")]),e._v(" anyone can call our API and we don't need to send any extra credentials. With "),s("code",[e._v("Function")]),e._v(" we need to send a function key as a header and with "),s("code",[e._v("Admin")]),e._v(" it's even more things we need to do, to be able to be allowed to call the function. We settle for the option "),s("code",[e._v("Anonymous")]),e._v(" as we, for now, want to make this easier to test. We should definitely revisit this choice as we progress building out our app. If it's a toy app "),s("code",[e._v("Anonymous")]),e._v(" is fine but in a production scenario, you probably want to have "),s("code",[e._v("Function")]),e._v(" or "),s("code",[e._v("Admin")]),e._v(" as options.")]),e._v(" "),s("p",[e._v("At this point you should have the following project structure:")]),e._v(" "),s("p",[s("img",{attrs:{src:"https://thepracticaldev.s3.amazonaws.com/i/i8bavjo6xnah20euhaxk.png",alt:""}})]),e._v(" "),s("h3",{attrs:{id:"debug"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#debug","aria-hidden":"true"}},[e._v("#")]),e._v(" Debug")]),e._v(" "),s("p",[e._v("Let's make sure that our serverless function is correctly created by trying to debug it. Place a breakpoint in your "),s("code",[e._v("index.js")]),e._v(" file like so:")]),e._v(" "),s("p",[s("img",{attrs:{src:"https://thepracticaldev.s3.amazonaws.com/i/u67t6u62bmcdwxi6lgur.png",alt:""}})]),e._v(" "),s("p",[e._v("and now let's go the "),s("code",[e._v("Debug")]),e._v(" menu, like so:")]),e._v(" "),s("p",[s("img",{attrs:{src:"https://thepracticaldev.s3.amazonaws.com/i/srwrabrnwj7qmtqq5f7x.png",alt:""}})]),e._v(" "),s("p",[e._v("This should start up the function and write a lot of things to the terminal and it should end with a URL printout looking like this:")]),e._v(" "),s("p",[s("img",{attrs:{src:"https://thepracticaldev.s3.amazonaws.com/i/pmma69eje43anl2zl6vk.png",alt:""}})]),e._v(" "),s("p",[e._v("So we go and visit the indicated URL "),s("code",[e._v("http://localhost:7071/api/graphql")]),e._v(" in a browser and this should lead to our breakpoint being hit:")]),e._v(" "),s("p",[s("img",{attrs:{src:"https://thepracticaldev.s3.amazonaws.com/i/7ilotme17k7zntd86xei.png",alt:""}})]),e._v(" "),s("p",[e._v("Good, everything is working. We can now go to the next step, which is to take our Graphql API implementation and call it from our serverless function.")]),e._v(" "),s("h2",{attrs:{id:"adding-the-graphql-api-to-our-serverless-app"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#adding-the-graphql-api-to-our-serverless-app","aria-hidden":"true"}},[e._v("#")]),e._v(" Adding the Graphql API to our Serverless app")]),e._v(" "),s("p",[e._v("Ok, add this point we need to make our created GraphQL part of our serverless app. To make that happen we need to move some files. We need to copy in the "),s("code",[e._v("package.json")]),e._v(" file to the root of our serverless function project. When we create a project using VS Code it will run "),s("code",[e._v("npm install")]),e._v(" for us, providing it finds a "),s("code",[e._v("package.json")]),e._v(" at the right level. The rest of the GraphQL API we can easily copy in as a subdirectory under our "),s("code",[e._v("serverless")]),e._v(" directory. It should now look like this:")]),e._v(" "),s("p",[s("img",{attrs:{src:"https://thepracticaldev.s3.amazonaws.com/i/f6c1avcge3q464fru2mi.png",alt:""}}),e._v("\nAs you can see above our GraphQL API directory "),s("code",[e._v("api")]),e._v(" has been copied in and it now only consists of the files "),s("code",[e._v("app.js")]),e._v(", "),s("code",[e._v("raw-schema.js")]),e._v(" and "),s("code",[e._v("services.js")]),e._v(". We have moved "),s("code",[e._v("package.json")]),e._v(" and the "),s("code",[e._v(".env")]),e._v(" file to the root of the serverless project.")]),e._v(" "),s("h3",{attrs:{id:"import-our-graphql-api"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#import-our-graphql-api","aria-hidden":"true"}},[e._v("#")]),e._v(" Import our GraphQL API")]),e._v(" "),s("p",[e._v("At this point, we can start importing and calling the GraphQL code from our Serverless function. Let's open the "),s("code",[e._v("graphql")]),e._v(" directory, where our function lives and open up "),s("code",[e._v("index.js")]),e._v(" and start adding an import statement to our GraphQL API, like so:")]),e._v(" "),s("div",{staticClass:"language-js line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("// /graphql/index.js")]),e._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("const")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v(" graphql"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" schema "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("require")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[e._v("'../api'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("\n\n"),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("// the rest omitted for brevity")]),e._v("\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br")])]),s("p",[e._v("The above means we are importing a file "),s("code",[e._v("../api.index.js")]),e._v(". We didn't create one in the past so we need to do that:")]),e._v(" "),s("div",{staticClass:"language-js line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("// ../api.index.js")]),e._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("const")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("\n  graphql\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("require")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[e._v("'graphql'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("const")]),e._v(" rawSchema "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("require")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[e._v("'./raw-schema'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("\n\n"),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("require")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[e._v("'dotenv'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("config")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\n\nmodule"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("exports "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("\n  schema"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" rawSchema"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v("\n  graphql\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),e._v("\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br"),s("span",{staticClass:"line-number"},[e._v("6")]),s("br"),s("span",{staticClass:"line-number"},[e._v("7")]),s("br"),s("span",{staticClass:"line-number"},[e._v("8")]),s("br"),s("span",{staticClass:"line-number"},[e._v("9")]),s("br"),s("span",{staticClass:"line-number"},[e._v("10")]),s("br"),s("span",{staticClass:"line-number"},[e._v("11")]),s("br"),s("span",{staticClass:"line-number"},[e._v("12")]),s("br"),s("span",{staticClass:"line-number"},[e._v("13")]),s("br")])]),s("h3",{attrs:{id:"call-the-graphql-api-from-our-serverless-function"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#call-the-graphql-api-from-our-serverless-function","aria-hidden":"true"}},[e._v("#")]),e._v(" Call the Graphql API from our serverless function")]),e._v(" "),s("p",[e._v("What now, how do we want to call our Serverless function? Well, we want to read a GraphQL query from either a query parameter our from the body.")]),e._v(" "),s("p",[e._v("Before we come that far let's ensure we can spin up our Serverless function, call our GraphQL API with a static query and get some result. So change the content of "),s("code",[e._v("serverless/graphql/index.js")]),e._v(" to the following:")]),e._v(" "),s("div",{staticClass:"language-js line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("const")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v(" graphql"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" schema "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("require")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[e._v("'../api'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\n\nmodule"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),s("span",{pre:!0,attrs:{class:"token function-variable function"}},[e._v("exports")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("async")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("function")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[e._v("context"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" req")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("\n    context"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[e._v("'JavaScript HTTP trigger function processed a request.'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("const")]),e._v(" query "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token template-string"}},[s("span",{pre:!0,attrs:{class:"token string"}},[e._v("`{ hello products { name, description } reviews { title, comment, grade, product { name, description } } }`")])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("const")]),e._v(" result "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("await")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("graphql")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("\n        schema"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v("\n        source"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" query\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\n    context"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("res "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("// status: 200, /* Defaults to 200 */")]),e._v("\n        body"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" result\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br"),s("span",{staticClass:"line-number"},[e._v("6")]),s("br"),s("span",{staticClass:"line-number"},[e._v("7")]),s("br"),s("span",{staticClass:"line-number"},[e._v("8")]),s("br"),s("span",{staticClass:"line-number"},[e._v("9")]),s("br"),s("span",{staticClass:"line-number"},[e._v("10")]),s("br"),s("span",{staticClass:"line-number"},[e._v("11")]),s("br"),s("span",{staticClass:"line-number"},[e._v("12")]),s("br"),s("span",{staticClass:"line-number"},[e._v("13")]),s("br"),s("span",{staticClass:"line-number"},[e._v("14")]),s("br"),s("span",{staticClass:"line-number"},[e._v("15")]),s("br"),s("span",{staticClass:"line-number"},[e._v("16")]),s("br")])]),s("p",[e._v("Let's ensure we have done the following before we proceed to test our implementation:")]),e._v(" "),s("ol",[s("li",[e._v("Ran "),s("code",[e._v("npm install")]),e._v(", we need to ensure we have installed, "),s("code",[e._v("graphql")]),e._v(", "),s("code",[e._v("dotenv")]),e._v(", "),s("code",[e._v("node-fetch")])]),e._v(" "),s("li",[s("strong",[e._v("Ran")]),e._v(" "),s("code",[e._v("docker-compose up -d")]),e._v(", we need to spin up our services that our GraphQL API queries")]),e._v(" "),s("li",[s("strong",[e._v("Add code")]),e._v(" calling the GraphQL API")]),e._v(" "),s("li",[s("strong",[e._v("Debug")]),e._v(" Serverless function")])]),e._v(" "),s("p",[e._v("When we've done steps 1-4 we are ready to debug. So let's select "),s("code",[e._v("Debug/ Start Debugging")])]),e._v(" "),s("p",[e._v("At this point we have something that we can test locally, so let's do just that:")]),e._v(" "),s("p",[s("img",{attrs:{src:"serverless-browser-result.png",alt:""}})]),e._v(" "),s("p",[e._v("Ok, we can see it seems to work. Now that the time has come to prepare for deploy.")]),e._v(" "),s("h2",{attrs:{id:"deploy-our-app-to-azure"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#deploy-our-app-to-azure","aria-hidden":"true"}},[e._v("#")]),e._v(" Deploy our app to Azure")]),e._v(" "),s("p",[e._v("Looking at it from a higher level there are some things we need to do. Our solution consists of two major parts, our microservices and our Serverless app that calls a GraphQL API. For our deployment to Cloud to work we need to deploy those parts separately. Let's list what we need to do and why:")]),e._v(" "),s("p",[e._v("##Â Deploy the microservices to the Cloud\nThe microservices needs to be created as service endpoints. Because we are already using Docker lets leverage that and continue using Docker but in the cloud. How do you ask? This is how:")]),e._v(" "),s("ol",[s("li",[s("strong",[e._v("Build")]),e._v(" the Docker images locally")]),e._v(" "),s("li",[s("strong",[e._v("Create")]),e._v(" a container registry in the Cloud, we will push our images to this registry. The reason is that our Container Registry is able to hold the images as a repository but it is also able to create containers from those images, provided they are inside the registry. Once we create containers from those images this will create service endpoints. Each service endpoint will receive a unique URL. We can use those URLs we get from the Cloud and have our Serverless/GraphQL solution point to those URLs instead of our local URLs")]),e._v(" "),s("li",[s("strong",[e._v("Tag images")]),e._v(", before we can push each Docker image to our container registry in the Cloud we need to tag it with credentials from the Container registry. Then it's a simple push command to make the images end up in the registry.")]),e._v(" "),s("li",[s("strong",[e._v("Create service endpoints")]),e._v(", when the Docker images are in our registry in the Cloud it's really simple to create containers from them, this will create service endpoints with a real URL, one for each service. We want the Serverless app and its GraphQL API to point to those endpoints")])]),e._v(" "),s("h3",{attrs:{id:"create-container-registry"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#create-container-registry","aria-hidden":"true"}},[e._v("#")]),e._v(" Create container registry")]),e._v(" "),s("p",[e._v("We might need a resource group first if we don't have one we want to use for this. I recommend having a specific resource group for everything that goes together, web apps, services, accounts, etc. Here is the syntax for creating a "),s("code",[e._v("Resource Group")]),e._v(" from the terminal:")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("az group create --name [name of resource group] --location westeurope\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br")])]),s("p",[e._v("At this point you are ready to create the container registry:")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("az acr create --resource-group [name of resource group] --name [name of container registry, unique and only a-z or 0-9] --sku Basic --admin-enabled true\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br")])]),s("p",[e._v("The above will create a container registry, using your existing resource group and it will also give your container registry a name and a price tier "),s("code",[e._v("Basic")]),e._v(".")]),e._v(" "),s("h3",{attrs:{id:"build-and-tag-images"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#build-and-tag-images","aria-hidden":"true"}},[e._v("#")]),e._v(" Build and tag Images")]),e._v(" "),s("p",[e._v("Building images id a simple as running a Docker command. We do this twice, once for each service. We can either place ourselves in each service directory, where the Dockerfile is or we need to specify for each image creation where each of the Dockerfiles is located. We do the former, that is place ourselves in each Dockerfile containing directory:")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("// in /products\n\ndocker build -t products-service .\n\n// in /reviews\n\ndocker build -t reviews-service .\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br"),s("span",{staticClass:"line-number"},[e._v("6")]),s("br"),s("span",{staticClass:"line-number"},[e._v("7")]),s("br")])]),s("p",[e._v("Above we are giving it the name "),s("code",[e._v("product-service")]),e._v(" and "),s("code",[e._v("reviews-service")]),e._v(" respectively. At this point, we are ready to tag the images, so our container registry recognizes them. To do so we need a piece of information from the container registry that we need to tag our image with. The information we are looking for is called the "),s("code",[e._v("loginServer")]),e._v(". There are two ways we can come by this information, both ways work:")]),e._v(" "),s("ol",[s("li",[e._v("Log in to the container registry and query for that property")]),e._v(" "),s("li",[e._v("Create it by merging the container registry name with a preset domain")])]),e._v(" "),s("p",[e._v("Let's do 1) first:")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("az acr login --name [name of registry]\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br")])]),s("p",[e._v("This will log us into the registry and we are ready to query it for the information we need:")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("az acr show --name [name of container registry] --query loginServer --output table\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br")])]),s("p",[e._v("Above we are actively querying for "),s("code",[e._v("loginServer")]),e._v(" and the result of this is our "),s("code",[e._v("loginServer")]),e._v(".")]),e._v(" "),s("p",[e._v("The second option 2) is realizing we can guess this information by merging "),s("code",[e._v("[name of registry].azurecr.io")]),e._v(". As the domain might differ in the future I would say querying for "),s("code",[e._v("loginServer")]),e._v(" is the more future safe way of doing it.")]),e._v(" "),s("p",[s("strong",[e._v("Tag the images")])]),e._v(" "),s("p",[e._v("Ok, time to tag our images:")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("docker tag products-service [loginServer]/products-service:v1\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br")])]),s("p",[e._v("and then one more time for the other service:")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("docker tag reviews-service [loginServer]/reviews-service:v1\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br")])]),s("h3",{attrs:{id:"push-images-to-the-cloud"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#push-images-to-the-cloud","aria-hidden":"true"}},[e._v("#")]),e._v(" Push images to the Cloud")]),e._v(" "),s("p",[e._v("Ok, finally we are ready to push the images to the container registry. This is as easy as typing:")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("docker push [loginServer]/products-service:v1\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br")])]),s("p",[e._v("and now for the "),s("code",[e._v("review-service")]),e._v(":")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("docker push [loginServer]/reviews-service:v1\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br")])]),s("p",[e._v("I'm not gonna lie, this takes time if you sit at home. At least for me sitting on a connection that has fast download and slow upload. Try doing this step on a company WiFi, or good home WiFi at the least the first time. The next time you do it it will be fast it is able to cache some of the layers in the image. We can see that caching in action already when we push the "),s("code",[e._v("reviews-service")]),e._v(" as they are very similar and uses the same image and other things:\n"),s("img",{attrs:{src:"https://thepracticaldev.s3.amazonaws.com/i/hkdqxenenysd6keihe3n.png",alt:""}})]),e._v(" "),s("p",[s("strong",[e._v("Verify our upload")])]),e._v(" "),s("p",[e._v("How do we know the images are actually in the registry, in our Cloud? We can query for them, like so:")]),e._v(" "),s("p",[s("img",{attrs:{src:"https://thepracticaldev.s3.amazonaws.com/i/03gybk1eq5ylsva5s9sd.png",alt:""}})]),e._v(" "),s("p",[e._v("Above we are running the command:")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("az acr repository list --name [name of registry] --output table\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br")])]),s("p",[e._v("And the result is our "),s("code",[e._v("products-service")]),e._v(" and our "),s("code",[e._v("reviews-service")]),e._v(". This is our images, but this time residing in the Cloud, in our container registry.")]),e._v(" "),s("h3",{attrs:{id:"create-service-endpoints"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#create-service-endpoints","aria-hidden":"true"}},[e._v("#")]),e._v(" Create service endpoints")]),e._v(" "),s("p",[e._v("There are two ways of doing this:")]),e._v(" "),s("ol",[s("li",[e._v("We keep using the terminal and we run a command that creates a service endpoint/container for each image")]),e._v(" "),s("li",[e._v("We use the Portal UI and select an App Service template that selects the right image")])]),e._v(" "),s("p",[s("strong",[e._v("The terminal")]),e._v("\nYes, you can be using the Terminal here and below are the commands to make that happen. For this, especially as we are deploying for the first time I would recommend you use the alternate version, the Portal UI so you see visually what's going on.")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("az acr show --name --query loginServer\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br")])]),s("p",[e._v("Then we get password and username")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v('az acr credential show --name --query "passwords[0].value"\n')])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br")])]),s("p",[e._v("Then we finally push:")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("az container create --resource-group [resource group] --name aci-tutorial-app --image <acrLoginServer>/[products-service or reviews-service]] --cpu 1 --memory 1 --registry-login-server [acrLoginServer] --registry-username [acrName] --registry-password [acrPassword] --dns-name-label [aciDnsLabel] --ports 80\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br")])]),s("p",[s("strong",[e._v("The portal UI")]),e._v("\nThis is the one that I use the most, I have to admit. I'm a creature of habit. We start with our usual create a resource button:")]),e._v(" "),s("p",[s("img",{attrs:{src:"https://thepracticaldev.s3.amazonaws.com/i/m3u7ox70e1hnfcvfl269.png",alt:""}})]),e._v(" "),s("p",[e._v("Thereafter we need to choose a Web template that takes containers, this one:")]),e._v(" "),s("p",[s("img",{attrs:{src:"https://thepracticaldev.s3.amazonaws.com/i/tbho3zfew4auk5789dot.png",alt:""}})]),e._v(" "),s("p",[e._v("Thereafter we need to fill in some mandatory fields:")]),e._v(" "),s("p",[s("img",{attrs:{src:"https://thepracticaldev.s3.amazonaws.com/i/hv4tjrud8dhybgav21ld.png",alt:""}}),e._v("\nThe "),s("code",[e._v("App name")]),e._v(" needs to be globally unique. Select the "),s("code",[e._v("Subscription")]),e._v(" you want should be billed. Select the existing "),s("code",[e._v("Resource Group")]),e._v(" you've just created. Select the appropriate "),s("code",[e._v("App Service plan")]),e._v(". Lastly, click "),s("code",[e._v("Configure container")]),e._v(", now it's time to select the correct container registry and image we want to create a container from.")]),e._v(" "),s("p",[s("img",{attrs:{src:"portal-container-config.png",alt:""}}),e._v(" Here we are choosing the registry we created "),s("code",[e._v("chrisgraphqlregistry")]),e._v(", in your case, choose your created registry. Next up we choose the image "),s("code",[e._v("products-service")]),e._v(", followed by the tag "),s("code",[e._v("v1")]),e._v(" and lastly we select our startup file "),s("code",[e._v("app.js")]),e._v(". Finally, we click "),s("code",[e._v("Apply")]),e._v(" and this takes us back to our previous dialog and here we press "),s("code",[e._v("Create")]),e._v(". At this point, it provisions a service endpoint that when done will tell us the resulting URL.")]),e._v(" "),s("p",[e._v("Once we click the provisioned resource, search for the "),s("code",[e._v("App name")]),e._v(" you gave it. You should come to a screen like this:")]),e._v(" "),s("p",[s("img",{attrs:{src:"https://thepracticaldev.s3.amazonaws.com/i/qvida8dim90zzdfe2opv.png",alt:""}})]),e._v(" "),s("p",[e._v("Now follow these exact instructions and do the same but create a service endpoint for the "),s("code",[e._v("reviews-service")]),e._v(".")]),e._v(" "),s("p",[e._v("The first time you click either of the URL it takes a while, a so-called "),s("em",[e._v("cold start")]),e._v(". Once it's ready the result should look like this, for the "),s("code",[e._v("products-service")]),e._v(":")]),e._v(" "),s("p",[s("img",{attrs:{src:"https://thepracticaldev.s3.amazonaws.com/i/kzb3jvuxe56mjub9r54g.png",alt:""}})]),e._v(" "),s("p",[e._v("and like this for the "),s("code",[e._v("reviews-service")]),e._v(":")]),e._v(" "),s("p",[s("img",{attrs:{src:"https://thepracticaldev.s3.amazonaws.com/i/0so113c6w5t4x6wgmm6i.png",alt:""}})]),e._v(" "),s("p",[e._v("This means that we have successfully deployed our services and we are about 90% there. Wasn't too bad, was it? ðŸ˜ƒ")]),e._v(" "),s("h2",{attrs:{id:"deploy-the-serverless-app"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#deploy-the-serverless-app","aria-hidden":"true"}},[e._v("#")]),e._v(" Deploy the Serverless app")]),e._v(" "),s("p",[e._v("Ok we need to do two things to deploy our serverless app:")]),e._v(" "),s("ol",[s("li",[e._v("Ensure the app reads its environment variables from the Cloud")]),e._v(" "),s("li",[e._v("Deploy the app, using VS Code")])]),e._v(" "),s("h3",{attrs:{id:"using-local-settings-json-over-env"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#using-local-settings-json-over-env","aria-hidden":"true"}},[e._v("#")]),e._v(" Using local.settings.json over .env")]),e._v(" "),s("p",[e._v("Right now we have the library "),s("code",[e._v("dotenv")]),e._v(" read in environment variables from a "),s("code",[e._v(".env")]),e._v(" file. This won't do when we are going to the Cloud. We need to read this from the "),s("code",[e._v("AppSettings")]),e._v(" property of our Serverless app, once it is in the Cloud. The file "),s("code",[e._v("local.setting.json")]),e._v(" can take its contents and copy itself into the AppSettings property so by populating that file we can ensure our environment variables end up in the Cloud.")]),e._v(" "),s("p",[e._v("Now that we have deployed the services successfully to the Cloud let's create a file called "),s("code",[e._v("local.settings.json")]),e._v(" in our Serverless app and have the content look like this with the service endpoint URLs filled in:")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v('// local.settings.json\n\n{\n  "IsEncrypted": false,\n  "Values": {\n    "PRODUCTS_URL": "https://products-service-container.azurewebsites.net/",\n    "REVIEW_URL": "https://reviews-service-container.azurewebsites.net/"\n  }\n}\n')])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br"),s("span",{staticClass:"line-number"},[e._v("6")]),s("br"),s("span",{staticClass:"line-number"},[e._v("7")]),s("br"),s("span",{staticClass:"line-number"},[e._v("8")]),s("br"),s("span",{staticClass:"line-number"},[e._v("9")]),s("br")])]),s("p",[e._v("At this point we can go into "),s("code",[e._v("serverless/api/index.js")]),e._v(" and remove the line that says:")]),e._v(" "),s("div",{staticClass:"language- line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-text"}},[s("code",[e._v("require('dotenv').config()\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br")])]),s("p",[e._v("cause now we are reading from "),s("code",[e._v("local.settings.json")]),e._v(". Now run the debugger. Go to your browser and it should still work at "),s("code",[e._v("http://localhost:7071/api/graphql")]),e._v(".")]),e._v(" "),s("p",[e._v("###Â Deploying the Serverless app\nThis means we are ready for that final deploy step. Are you ready? Now I mean ready ready? Good, ok, let's do it ðŸ˜ƒ")]),e._v(" "),s("p",[e._v("At this point, we need to interact with the "),s("code",[e._v("Azure view")]),e._v(". If you can't see it then take "),s("code",[e._v("View / Open View")]),e._v(", like so:\n"),s("img",{attrs:{src:"open-view.png",alt:""}})]),e._v(" "),s("p",[e._v("Then select to sign in to Azure, like so:")]),e._v(" "),s("p",[s("img",{attrs:{src:"https://thepracticaldev.s3.amazonaws.com/i/0485qfd86jawp4c9blx3.png",alt:""}})]),e._v(" "),s("p",[e._v("This will take you to a browser page that asks you to sign in. Once that is done, head back to VS Code and select the following:")]),e._v(" "),s("p",[s("img",{attrs:{src:"https://thepracticaldev.s3.amazonaws.com/i/p07g5173lrpvuwuusvi0.png",alt:""}})]),e._v(" "),s("p",[e._v("Ok, at this point you are asked to select a subscription. After that, you come to this dialog\n"),s("img",{attrs:{src:"https://thepracticaldev.s3.amazonaws.com/i/feovtte58st3x1l1byez.png",alt:""}}),e._v(".\nClick to create a new Function app in the Azure.")]),e._v(" "),s("p",[e._v("Lastly, you are asked to give the app a name. It needs to be globally unique. At this point, it will start to provision.\nIt will show something like this while we wait for it to finish:")]),e._v(" "),s("p",[s("img",{attrs:{src:"https://thepracticaldev.s3.amazonaws.com/i/sx350ke8d6u820s8kycn.png",alt:""}})]),e._v(" "),s("p",[e._v("When done it will show you this:")]),e._v(" "),s("p",[s("img",{attrs:{src:"https://thepracticaldev.s3.amazonaws.com/i/7nis5z0xk4fcyv2y6dnm.png",alt:""}})]),e._v(" "),s("p",[e._v("Ok, let's click "),s("code",[e._v("View Output")]),e._v(":")]),e._v(" "),s("p",[e._v("The first time you look at this the output might state that it has no knowledge of "),s("code",[e._v("PRODUCTS_URL")]),e._v(" and "),s("code",[e._v("REVIEWS_URL")]),e._v(" but we can fix that in our Azure menu, like so:")]),e._v(" "),s("p",[s("img",{attrs:{src:"https://thepracticaldev.s3.amazonaws.com/i/yw4d7m5d02nneh1a4ro3.png",alt:""}})]),e._v(" "),s("p",[e._v("After that. Head to the portal again. Click "),s("code",[e._v("get function URL")]),e._v(":")]),e._v(" "),s("p",[s("img",{attrs:{src:"https://thepracticaldev.s3.amazonaws.com/i/rbighlc06hrcsm35piha.png",alt:""}}),e._v("\nand this time you should see this in the browser:")]),e._v(" "),s("p",[s("img",{attrs:{src:"https://thepracticaldev.s3.amazonaws.com/i/8ef5wfhx2pet77w1eaur.png",alt:""}})]),e._v(" "),s("p",[e._v("We did it. We deployed the services to the Cloud, we deployed the serverless app.")]),e._v(" "),s("p",[s("strong",[e._v("Final touch")])]),e._v(" "),s("p",[e._v("Right now we are hardcoding what the query is that we send to our GraphQL API, so let's fix that and redeploy. The code should look like this now:")]),e._v(" "),s("div",{staticClass:"language-js line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("// serverless/graphql/index.js")]),e._v("\n\n"),s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("const")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v(" graphql"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" schema "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("require")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[e._v("'../api'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\n\nmodule"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),s("span",{pre:!0,attrs:{class:"token function-variable function"}},[e._v("exports")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("async")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("function")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),s("span",{pre:!0,attrs:{class:"token parameter"}},[e._v("context"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" req")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("\n    context"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[e._v("'Products url'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" process"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("env"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),s("span",{pre:!0,attrs:{class:"token constant"}},[e._v("PRODUCTS_URL")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("\n    context"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[e._v("'Reviews url'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" process"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("env"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),s("span",{pre:!0,attrs:{class:"token constant"}},[e._v("REVIEW_URL")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("\n\n    context"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[e._v("'JavaScript HTTP trigger function processed a request.'")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("const")]),e._v(" query "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" req"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("query"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("query "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("||")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("req"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("body "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("&&")]),e._v(" req"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("body"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("query"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("if")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("!")]),e._v("query"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("\n        context"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("res "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("\n            status"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[e._v("400")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v("\n            body"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token string"}},[e._v('"You must send `query` as a query parameter or in the body"')]),e._v("\n        "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),e._v("\n\n    "),s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("const")]),e._v(" result "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("await")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[e._v("graphql")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("\n        schema"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v("\n        source"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" query\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\n    context"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("res "),s("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("{")]),e._v("\n        "),s("span",{pre:!0,attrs:{class:"token comment"}},[e._v("// status: 200, /* Defaults to 200 */")]),e._v("\n        body"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(":")]),e._v(" result\n    "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(";")]),e._v("\n")])]),e._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[e._v("1")]),s("br"),s("span",{staticClass:"line-number"},[e._v("2")]),s("br"),s("span",{staticClass:"line-number"},[e._v("3")]),s("br"),s("span",{staticClass:"line-number"},[e._v("4")]),s("br"),s("span",{staticClass:"line-number"},[e._v("5")]),s("br"),s("span",{staticClass:"line-number"},[e._v("6")]),s("br"),s("span",{staticClass:"line-number"},[e._v("7")]),s("br"),s("span",{staticClass:"line-number"},[e._v("8")]),s("br"),s("span",{staticClass:"line-number"},[e._v("9")]),s("br"),s("span",{staticClass:"line-number"},[e._v("10")]),s("br"),s("span",{staticClass:"line-number"},[e._v("11")]),s("br"),s("span",{staticClass:"line-number"},[e._v("12")]),s("br"),s("span",{staticClass:"line-number"},[e._v("13")]),s("br"),s("span",{staticClass:"line-number"},[e._v("14")]),s("br"),s("span",{staticClass:"line-number"},[e._v("15")]),s("br"),s("span",{staticClass:"line-number"},[e._v("16")]),s("br"),s("span",{staticClass:"line-number"},[e._v("17")]),s("br"),s("span",{staticClass:"line-number"},[e._v("18")]),s("br"),s("span",{staticClass:"line-number"},[e._v("19")]),s("br"),s("span",{staticClass:"line-number"},[e._v("20")]),s("br"),s("span",{staticClass:"line-number"},[e._v("21")]),s("br"),s("span",{staticClass:"line-number"},[e._v("22")]),s("br"),s("span",{staticClass:"line-number"},[e._v("23")]),s("br"),s("span",{staticClass:"line-number"},[e._v("24")]),s("br"),s("span",{staticClass:"line-number"},[e._v("25")]),s("br"),s("span",{staticClass:"line-number"},[e._v("26")]),s("br"),s("span",{staticClass:"line-number"},[e._v("27")]),s("br"),s("span",{staticClass:"line-number"},[e._v("28")]),s("br")])]),s("p",[e._v("Now, redeploy\n"),s("img",{attrs:{src:"https://thepracticaldev.s3.amazonaws.com/i/zzz3vdn3cz1kvjv8ffsz.png",alt:""}})]),e._v(" "),s("p",[e._v("It should look like this:")]),e._v(" "),s("p",[s("img",{attrs:{src:"https://thepracticaldev.s3.amazonaws.com/i/s9qhcfgjogu6q277utav.png",alt:""}})]),e._v(" "),s("p",[e._v("Ok, it seems to be working, it fails if it doesn't get a query param. Let's give it one "),s("code",[e._v("query")]),e._v(" and let's assign it with the query "),s("code",[e._v("{ reviews { grade, product { name } } }")])]),e._v(" "),s("p",[s("img",{attrs:{src:"https://thepracticaldev.s3.amazonaws.com/i/lrjszjqshix6yoyg949y.png",alt:""}})]),e._v(" "),s("p",[e._v("##Â Summary")]),e._v(" "),s("p",[e._v("There we have it, boys and girls. A working Serverless/GRaphQL API that talks to Microservices, also in the Cloud. How excited are you? I'm this excited:")]),e._v(" "),s("p",[s("img",{attrs:{src:"https://thepracticaldev.s3.amazonaws.com/i/wcbuqieaaeln403ou7sn.gif",alt:""}})]),e._v(" "),s("p",[e._v("We started off with separate microservices. Dockerized those and ensured each service could be reachable through a URL. At that point, we started building a GraphQL API and started querying those services as a way to stitch together data which is one of the advantages of GraphQL to be that API on top of many other APIs.")]),e._v(" "),s("p",[e._v("In this part, we went and put those services in the Cloud. We also created a Serverless App and pulled in our GraphQL API, that was also sent to the Cloud and suddenly everything is in the Cloud and can be maintained and redeployed separately. We are set up in a great way to expand our GraphQL API and we are really using the advantage of Serverless, we focus on writing code and ensure that we don't pay for more than we use.")])])},[],!1,null,null,null);t.default=r.exports}}]);