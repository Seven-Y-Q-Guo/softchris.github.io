(window.webpackJsonp=window.webpackJsonp||[]).push([[138],{377:function(e,t,a){"use strict";a.r(t);var n=a(1),s=Object(n.a)({},function(){var e=this,t=e.$createElement,a=e._self._c||t;return a("ContentSlotsDistributor",{attrs:{"slot-key":e.$parent.slotKey}},[a("h1",{attrs:{id:"learn-docker-from-the-beginning-part-i"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#learn-docker-from-the-beginning-part-i","aria-hidden":"true"}},[e._v("#")]),e._v(" Learn Docker, from the beginning, part I")]),e._v(" "),a("p",[e._v("Follow me on "),a("a",{attrs:{href:"https://twitter.com/chris_noring",target:"_blank",rel:"noopener noreferrer"}},[e._v("Twitter"),a("OutboundLink")],1),e._v(", happy to take your suggestions on topics or improvements /Chris")]),e._v(" "),a("p",[e._v("This article is part of a series:")]),e._v(" "),a("ul",[a("li",[e._v("Docker — from the beginning part I, we are here.")]),e._v(" "),a("li",[a("a",{attrs:{href:"https://softchris.github.io/pages/docker-two.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("Docker — from the beginning, Part II"),a("OutboundLink")],1),e._v(", this is about Volumes and how we can use volumes to persist data but also how we can turn our development environment into a Volume and make our development experience considerably better")]),e._v(" "),a("li",[a("a",{attrs:{href:"https://softchris.github.io/pages/docker-three.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("Docker — from the beginning, Part III"),a("OutboundLink")],1),e._v(", this is about how to deal with Databases, putting them into containers and how to make containers talk to other containers using legacy linking but also the new standard through networks")]),e._v(" "),a("li",[a("a",{attrs:{href:"https://softchris.github.io/pages/docker-four.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("Docker — from the beginning, Part IV"),a("OutboundLink")],1),e._v(", Part IV, this is how we manage more than one service using Docker Compose ( this is 1/2 part on Docker Compose)")]),e._v(" "),a("li",[a("a",{attrs:{href:"https://softchris.github.io/pages/docker-five.html",target:"_blank",rel:"noopener noreferrer"}},[e._v("Docker - from the beginning, Part V"),a("OutboundLink")],1),e._v(", this part is the second and concluding part on Docker Compose where we cover Volumes, Environment Variables and working with Databases and Networks")])]),e._v(" "),a("p",[e._v("Now there are a ton of articles out there for Docker but I struggle with the fact that none of them are really thorough and explains what goes on, or rather that’s my impression, feel free to disagree 😃. I should say I’m writing a lot of these articles for me and my own understanding and to have fun in the process 😃. I also hope that it can be useful for you as well.")]),e._v(" "),a("p",[e._v("So I decided to dig relatively deep so that you all hopefully might benefit. TLDR, this is the first part in a series of articles on Docker, this part explains the basics and the reason I think you should use Docker.")]),e._v(" "),a("blockquote",[a("p",[e._v("This article really is Docker from the beginning, I assume no pre-knowledge, "),a("strong",[e._v("I assume nothing")]),e._v(". Enjoy 😃")])]),e._v(" "),a("p",[a("img",{attrs:{src:"https://thepracticaldev.s3.amazonaws.com/i/eraje0glxkytubhnw6cj.jpg",alt:"alt text",title:"Whale, Docker"}})]),e._v(" "),a("p",[e._v("In this article, we will attempt to cover the following topics")]),e._v(" "),a("ul",[a("li",[a("strong",[e._v("Why Docker and what is it")]),e._v(", this is probably the most important part of the article, why Docker, why not some other technology or status quo? I will attempt to explain what Docker is and what it consists of.")]),e._v(" "),a("li",[a("strong",[e._v("Docker in action")]),e._v(", we will dockerize an application to showcase we understand and can use the core concepts that make out Docker.")]),e._v(" "),a("li",[a("strong",[e._v("Improving our set up")]),e._v(", we should ensure our solution does not rely on static values. We can ensure this by creating and setting environment variables whose value we can read from inside of our application.")]),e._v(" "),a("li",[a("strong",[e._v("Managing our container")]),e._v(", now it’s fairly easy to get a container up and running but let’s look how to manage it, after all, we don’t want the container to be up and running forever. Even it’s a very lightweight thing, it adds up and it can block ports that you want to use for other things.")])]),e._v(" "),a("p",[e._v("Remember that this is the first part of a series and that we will look into other things in this series on Docker such as Volumes, Linking, Micro Services, and Orchestration, but that will be covered in future parts.")]),e._v(" "),a("h2",{attrs:{id:"resources"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#resources","aria-hidden":"true"}},[e._v("#")]),e._v(" Resources")]),e._v(" "),a("p",[e._v("Using Docker and containerization is about breaking apart a monolith into microservices. Throughout this series, we will learn to master Docker and all its commands. Sooner or later you will want to take your containers to a production environment. That environment is usually the Cloud. When you feel you've got enough Docker experience have a look at these links to see how Docker can be used in the Cloud as well:")]),e._v(" "),a("ul",[a("li",[a("a",{attrs:{href:"https://azure.microsoft.com/en-us/free/?wt.mc_id=academic-0000-chnoring",target:"_blank",rel:"noopener noreferrer"}},[e._v("Sign up for a free Azure account"),a("OutboundLink")],1),e._v("\nTo use containers in the Cloud like a private registry you will need a free Azure account")]),e._v(" "),a("li",[a("a",{attrs:{href:"https://docs.microsoft.com/en-gb/azure/containers/?wt.mc_id=academic-0000-chnoring",target:"_blank",rel:"noopener noreferrer"}},[e._v("Containers in the Cloud"),a("OutboundLink")],1),e._v("\nGreat overview page that shows what else there is to know about containers in the Cloud")]),e._v(" "),a("li",[a("a",{attrs:{href:"https://docs.microsoft.com/en-gb/azure/container-instances/container-instances-tutorial-prepare-app?wt.mc_id=academic-0000-chnoring",target:"_blank",rel:"noopener noreferrer"}},[e._v("Deploying your containers in the Cloud"),a("OutboundLink")],1),e._v(" Tutorial that shows how easy it is to leverage your existing Docker skill and get your services running in the Cloud")]),e._v(" "),a("li",[a("a",{attrs:{href:"https://docs.microsoft.com/en-gb/azure/container-instances/container-instances-tutorial-prepare-acr?wt.mc_id=academic-0000-chnoring",target:"_blank",rel:"noopener noreferrer"}},[e._v("Creating a container registry"),a("OutboundLink")],1),e._v("\nYour Docker images can be in Docker Hub but also in a Container Registry in the Cloud. Wouldn't it be great to store your images somewhere and actually be able to create a service from that Registry in a matter of minutes?")])]),e._v(" "),a("h2",{attrs:{id:"why-docker-and-what-is-it"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#why-docker-and-what-is-it","aria-hidden":"true"}},[e._v("#")]),e._v(" Why Docker and what is it")]),e._v(" "),a("p",[e._v("Docker helps you create a reproducible environment. You are able to specify the specific OS, the exact version of different libraries, different environment variables and their values among other things. Most importantly you are able to run your application in isolation inside of that environment.")]),e._v(" "),a("p",[e._v("The big question is why we would want that?")]),e._v(" "),a("ul",[a("li",[a("strong",[e._v("onboarding")]),e._v(", every time you onboard a new developer in a project they need to set up a lot of things like installing SDKs, development tools, databases, add permissions and so on. This a process that can take from one day to up to 2 weeks")]),e._v(" "),a("li",[a("strong",[e._v("environments looks the same")]),e._v(", using Docker you can create a DEV, STAGING as well as PRODUCTION environment that all look the same. That is really great as before Docker/containerization you could have environments that were similar but there might have been small differences and when you discovered a bug you could spend a lot of time chasing down the root cause of the bug. Sometimes the bug was in the source code itself but sometimes it was due to some difference in the environment and that usually took a long time to determine.")]),e._v(" "),a("li",[a("strong",[e._v("works on my machine")]),e._v(", this point is much like the above but because Docker creates these isolated containers, where you specify exactly what they should contain, you can also ship these containers to the customers and they will operate in the exact same way as they did on your development machine/s.")])]),e._v(" "),a("p",[e._v("##What is it\nOk, so we’ve mentioned some great reasons above why you should look into Docker but let's dive more into what Docker actually is. We’ve established that it lets us specify an environment like the OS, how to find and run the apps and the variables you need, but what else is there to know about Docker?")]),e._v(" "),a("p",[e._v("Docker creates stand-alone packages called "),a("em",[e._v("containers")]),e._v(" that contain everything that is needed for you to run your application. Each container gets its own CPU, memory and network resources and does not depend on a specific operating system or kernel. The first that comes to mind when I describe the above is a Virtual Machine, but Docker differs in how it shares or dedicates resources. Docker uses a so-called "),a("em",[e._v("layered file system")]),e._v(" which enables the containers to share common parts and the end result is that containers are way less of resource-hog on the host system than a virtual machine.")]),e._v(" "),a("p",[e._v("In short, the Docker containers, contain everything you need to run an application, including the source code you wrote. Containers are also isolated and secure light-weight units on your system. This makes it easy to create multiple micro-services that are written in different programming languages and that are using different versions of the same lib and even the same OS.")]),e._v(" "),a("p",[e._v("If you are curious about how exactly Docker does this I urge to have a look at the following links on "),a("a",{attrs:{href:"http://aufs.sourceforge.net/",target:"_blank",rel:"noopener noreferrer"}},[e._v("layered file system"),a("OutboundLink")],1),e._v(" and the library "),a("a",{attrs:{href:"https://github.com/opencontainers/runc",target:"_blank",rel:"noopener noreferrer"}},[e._v("runc"),a("OutboundLink")],1),e._v(" and also this great "),a("a",{attrs:{href:"https://en.wikipedia.org/wiki/Docker_%28software%29",target:"_blank",rel:"noopener noreferrer"}},[e._v("wikipedia"),a("OutboundLink")],1),e._v(" overview of Docker.")]),e._v(" "),a("h2",{attrs:{id:"docker-in-action"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#docker-in-action","aria-hidden":"true"}},[e._v("#")]),e._v(" Docker in action")]),e._v(" "),a("p",[e._v("Ok, so we covered what Docker is and some benefits. We also understood that the thing that eventually runs my application is called a "),a("code",[e._v("container")]),e._v(". But how do we get there? Well, we start out with a description file, called a "),a("code",[e._v("Dockerfile")]),e._v(". In this "),a("code",[e._v("Dockerfile")]),e._v(", we specify everything we need in terms of OS, environment variables and how to get our application in there.")]),e._v(" "),a("p",[e._v("Now we will jump in at the deep end. We will build an app and "),a("em",[e._v("Dockerize")]),e._v(" it, so we will have our app running inside of a container, isolated from the outside world but reachable on ports that we explicitly open up.")]),e._v(" "),a("p",[e._v("We will take the following steps:")]),e._v(" "),a("ul",[a("li",[a("strong",[e._v("create an application")]),e._v(", we will create a Node.js Express application, which will act as a REST API.")]),e._v(" "),a("li",[a("strong",[e._v("create a Dockerfile")]),e._v(", a text file that tells Docker how to build our application")]),e._v(" "),a("li",[a("strong",[e._v("build an image")]),e._v(", the pre-step to having our application up and running is to first create a so-called Docker image")]),e._v(" "),a("li",[a("strong",[e._v("create a container")]),e._v(", this is the final step in which we will see our app up and running, we will create a container from a Docker image")])]),e._v(" "),a("h3",{attrs:{id:"creating-our-app"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#creating-our-app","aria-hidden":"true"}},[e._v("#")]),e._v(" Creating our app")]),e._v(" "),a("p",[e._v("We will now create an Express Node.js project and it will consist of the following files:")]),e._v(" "),a("ul",[a("li",[a("strong",[e._v("app.js")]),e._v(", this is the file that spins up our REST")]),e._v(" "),a("li",[a("strong",[e._v("package.json")]),e._v(", this is the manifest file for the project, here we will see all the dependencies like express but we will also declare a script start so we can easily start our application")]),e._v(" "),a("li",[a("strong",[e._v("Dockerfile")]),e._v(", this is a file we will create to tell Docker how to Dockerize our application")])]),e._v(" "),a("p",[e._v("To generate our "),a("code",[e._v("package.json")]),e._v(" we just place ourselves in the projects directory and type:")]),e._v(" "),a("blockquote",[a("p",[e._v("npm init -y")])]),e._v(" "),a("p",[e._v("This will produce the package.json file with a bunch of default values.")]),e._v(" "),a("p",[e._v("Then we should add the dependencies we are about to use, which is the library "),a("code",[e._v("express")]),e._v(" , we install it by typing like this:")]),e._v(" "),a("blockquote",[a("p",[e._v("npm install express —-save")])]),e._v(" "),a("h3",{attrs:{id:"let’s-add-some-code"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#let’s-add-some-code","aria-hidden":"true"}},[e._v("#")]),e._v(" Let’s add some code")]),e._v(" "),a("p",[e._v("Now when we have done all the prework with generating a package.json file and installing dependencies, it’s time to add the code needed for our application to run, so we add the following code to "),a("code",[e._v("app.js")]),e._v(":")]),e._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("// app.js")]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("const")]),e._v(" express "),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[e._v("require")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[e._v("'express'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("const")]),e._v(" app "),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[e._v("express")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("const")]),e._v(" port "),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token number"}},[e._v("3000")]),e._v("\n\napp"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[e._v("get")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[e._v("'/'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[e._v("req"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" res")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=>")]),e._v(" res"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[e._v("send")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[e._v("'Hello World!'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\n\napp"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[e._v("listen")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("port"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=>")]),e._v(" console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[e._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),a("span",{pre:!0,attrs:{class:"token template-string"}},[a("span",{pre:!0,attrs:{class:"token string"}},[e._v("`Example app listening on port ")]),a("span",{pre:!0,attrs:{class:"token interpolation"}},[a("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[e._v("${")]),e._v("port"),a("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[e._v("}")])]),a("span",{pre:!0,attrs:{class:"token string"}},[e._v("!`")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br"),a("span",{staticClass:"line-number"},[e._v("2")]),a("br"),a("span",{staticClass:"line-number"},[e._v("3")]),a("br"),a("span",{staticClass:"line-number"},[e._v("4")]),a("br"),a("span",{staticClass:"line-number"},[e._v("5")]),a("br"),a("span",{staticClass:"line-number"},[e._v("6")]),a("br"),a("span",{staticClass:"line-number"},[e._v("7")]),a("br"),a("span",{staticClass:"line-number"},[e._v("8")]),a("br"),a("span",{staticClass:"line-number"},[e._v("9")]),a("br"),a("span",{staticClass:"line-number"},[e._v("10")]),a("br")])]),a("p",[e._v("We can try and run this application by typing:")]),e._v(" "),a("blockquote",[a("p",[e._v("node app.js")])]),e._v(" "),a("p",[e._v("Going to a web browser on "),a("code",[e._v("http://localhost:3000")]),e._v(" we should now see:")]),e._v(" "),a("p",[a("img",{attrs:{src:"https://thepracticaldev.s3.amazonaws.com/i/i8v19k34qntqsoxsh0vq.png",alt:"alt text",title:"Hello world"}})]),e._v(" "),a("p",[e._v("Ok so that works, good 😃")]),e._v(" "),a("blockquote",[a("p",[e._v("One little comment though, we should take note of the fact that we are assigning the port to 3000 when we later create our Dockerfile.")])]),e._v(" "),a("h3",{attrs:{id:"creating-a-dockerfile"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#creating-a-dockerfile","aria-hidden":"true"}},[e._v("#")]),e._v(" Creating a Dockerfile")]),e._v(" "),a("p",[e._v("So the next step is creating our Dockerfile. Now, this file acts as a manifest but also as a build instruction file, how to get our app up and running. Ok, so what is needed to get the app up and running? We need to:")]),e._v(" "),a("ul",[a("li",[a("strong",[e._v("copy")]),e._v(" all app files into the docker container")]),e._v(" "),a("li",[a("strong",[e._v("install")]),e._v(" dependencies like express")]),e._v(" "),a("li",[a("strong",[e._v("open up a port")]),e._v(", in the container that can be accessed from the outside")]),e._v(" "),a("li",[a("strong",[e._v("instruct")]),e._v(", the container how to start our app")])]),e._v(" "),a("p",[e._v("In a more complex application, we might need to do things like setting environment variables or set credentials for a database or run a database seed to populate the database and so on. For now, we only need the things we specified in our bullet list above. So let’s try to express that in our Dockerfile:")]),e._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('# Dockerfile\n\nFROM node:latest\n\nWORKDIR /app\n\nCOPY . .\n\nRUN npm install\n\nEXPOSE 3000\n\nENTRYPOINT ["node", "app.js"]\n')])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br"),a("span",{staticClass:"line-number"},[e._v("2")]),a("br"),a("span",{staticClass:"line-number"},[e._v("3")]),a("br"),a("span",{staticClass:"line-number"},[e._v("4")]),a("br"),a("span",{staticClass:"line-number"},[e._v("5")]),a("br"),a("span",{staticClass:"line-number"},[e._v("6")]),a("br"),a("span",{staticClass:"line-number"},[e._v("7")]),a("br"),a("span",{staticClass:"line-number"},[e._v("8")]),a("br"),a("span",{staticClass:"line-number"},[e._v("9")]),a("br"),a("span",{staticClass:"line-number"},[e._v("10")]),a("br"),a("span",{staticClass:"line-number"},[e._v("11")]),a("br"),a("span",{staticClass:"line-number"},[e._v("12")]),a("br"),a("span",{staticClass:"line-number"},[e._v("13")]),a("br")])]),a("p",[e._v("Let’s break the above commands down:")]),e._v(" "),a("ul",[a("li",[a("strong",[e._v("FROM")]),e._v(", this is us selecting an OS image from Docker Hub. Docker Hub is a global repository that contains images that we can pull down locally. In our case we are choosing an image based on Ubuntu that has Node.js installed, it’s called node. We also specify that we want the latest version of it, by using the following tag "),a("code",[e._v(":latest")])]),e._v(" "),a("li",[a("strong",[e._v("WORKDIR")]),e._v(", this simply means we set a working directory. This is a way to set up for what is to happen later, in the next command below")]),e._v(" "),a("li",[a("strong",[e._v("COPY")]),e._v(", here we copy the files from the directory we are standing into the directory specified by our WORKDIR command")]),e._v(" "),a("li",[a("strong",[e._v("RUN")]),e._v(", this runs a command in the terminal, in our case we are installing all the libraries we need to build our Node.js express application")]),e._v(" "),a("li",[a("strong",[e._v("EXPOSE")]),e._v(", this means we are opening up a port, it is through this port that we communicate with our container")]),e._v(" "),a("li",[a("strong",[e._v("ENTRYPOINT")]),e._v(", this is where we should state how we start up our application, the commands need to be specified as an array so the array "),a("code",[e._v("[“node”, “app.js”]")]),e._v(" will be translated to the node app.js in the terminal")])]),e._v(" "),a("h3",{attrs:{id:"quick-overview"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#quick-overview","aria-hidden":"true"}},[e._v("#")]),e._v(" Quick overview")]),e._v(" "),a("p",[e._v("Ok, so now we have created all the files we need for our project and it should look like this:")]),e._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v("app.js // our express app\nDockerfile // our instruction file that Docker will read from\n/node_modules // directory created when we run npm install\npackage.json // npm init created this\npackage-lock.json // created when we installed libraries from NPM\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br"),a("span",{staticClass:"line-number"},[e._v("2")]),a("br"),a("span",{staticClass:"line-number"},[e._v("3")]),a("br"),a("span",{staticClass:"line-number"},[e._v("4")]),a("br"),a("span",{staticClass:"line-number"},[e._v("5")]),a("br")])]),a("p",[e._v("###Building an image\nThere are two steps that need to be taken to have our application up and running inside of a container, those are:")]),e._v(" "),a("ul",[a("li",[a("strong",[e._v("creating an image")]),e._v(", with the help of the Dockerfile and the command "),a("code",[e._v("docker build")]),e._v(" we will create an image")]),e._v(" "),a("li",[a("strong",[e._v("start the container")]),e._v(", now that we have an image from the action we took above we need to create a container")])]),e._v(" "),a("p",[e._v("First things first, let’s create our image with the following command:")]),e._v(" "),a("blockquote",[a("p",[e._v("docker build -t chrisnoring/node:latest .")])]),e._v(" "),a("p",[e._v("The above instruction creates an image. The "),a("code",[e._v(".")]),e._v(" at the end is important as this instructs Docker and tells it where your Dockerfile is located, in this case, it is the directory you are standing in. If you don’t have the OS image, that we ask for in the "),a("code",[e._v("FROM")]),e._v(" command, it will lead to it being pulled down from Docker Hub and then your specific image is being built.")]),e._v(" "),a("p",[e._v("Your terminal should look something like this:")]),e._v(" "),a("p",[a("img",{attrs:{src:"https://thepracticaldev.s3.amazonaws.com/i/k935qpijny7645ujsi7j.png",alt:"alt text",title:"Building Docker image"}})]),e._v(" "),a("p",[e._v("What we see above is how the OS image "),a("code",[e._v("node:latest")]),e._v(" is being pulled down from the Docker Hub and then each of our commands is being executed like "),a("code",[e._v("WORKDIR")]),e._v(", "),a("code",[e._v("RUN")]),e._v(" and so on. Worth noting is how it says removing intermediate container after each step. Now, this is Docker being smart and caching all the different file layers after each command so it goes faster. In the end, we see "),a("code",[e._v("successfully built")]),e._v(" which is our cue that everything was constructed successfully. Let’s have a look at our image with:")]),e._v(" "),a("blockquote",[a("p",[e._v("docker images")])]),e._v(" "),a("p",[a("img",{attrs:{src:"https://thepracticaldev.s3.amazonaws.com/i/wrcl6u198j7bnwa7j5dt.png",alt:"alt text",title:"docker images command"}})]),e._v(" "),a("p",[e._v("We have an image, success 😃")]),e._v(" "),a("h3",{attrs:{id:"creating-a-container"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#creating-a-container","aria-hidden":"true"}},[e._v("#")]),e._v(" Creating a container")]),e._v(" "),a("p",[e._v("Next step is to take our image and construct a container from it. A container is this isolated piece that runs our app inside of it. We build a container using "),a("code",[e._v("docker run")]),e._v(" . The full command looks like this:")]),e._v(" "),a("blockquote",[a("p",[e._v("docker run chrisnoring/node")])]),e._v(" "),a("p",[e._v("That’s not really good enough though as we need to map the internal port of the app to an external one, on the host machine. Remember this is an app that we want to reach through our browser. We do the mapping by using the flag "),a("code",[e._v("-p")]),e._v(" like so:")]),e._v(" "),a("blockquote",[a("p",[e._v("-p [external port]:[internal port]")])]),e._v(" "),a("p",[e._v("Now the full command now looks like this:")]),e._v(" "),a("blockquote",[a("p",[e._v("docker run -p 8000:3000 chrisnoring/node")])]),e._v(" "),a("p",[e._v("Ok, running this command means we should be able to visit our container by going to "),a("code",[e._v("http://localhost:8000")]),e._v(", "),a("code",[e._v("8000")]),e._v(" is our external port remember that maps to the internal port 3000. Let’s see, let’s open up a browser:")]),e._v(" "),a("p",[a("img",{attrs:{src:"https://thepracticaldev.s3.amazonaws.com/i/nz1gfboszbw6dft0gruk.png",alt:"alt text",title:"Containerized app in the browser"}})]),e._v(" "),a("p",[e._v("There we have it folks, a working container 😄")]),e._v(" "),a("p",[a("img",{attrs:{src:"https://thepracticaldev.s3.amazonaws.com/i/z7wz22pc9akrgwjprzyw.gif",alt:"alt text",title:"High five, we did it"}})]),e._v(" "),a("h2",{attrs:{id:"improving-our-set-up-with-environment-variables"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#improving-our-set-up-with-environment-variables","aria-hidden":"true"}},[e._v("#")]),e._v(" Improving our set up with Environment Variables")]),e._v(" "),a("p",[e._v("Ok, so we’ve learned how to build our Docker image, we’ve learned how to run a container and thereby our app inside of it. However, we could be handling the part with PORT a bit nicer. Right now we need to keep track of the port we start the "),a("code",[e._v("express")]),e._v(" server with, inside of our app.js , to make sure this matches what we write in the Dockerfile. It shouldn’t have to be that way, it’s just static and error-prone.")]),e._v(" "),a("p",[e._v("To fix it we could introduce an environment variable. This means that we need to do two things:")]),e._v(" "),a("ul",[a("li",[a("strong",[e._v("add")]),e._v(" an environment variable to the Dockerfile")]),e._v(" "),a("li",[a("strong",[e._v("read")]),e._v(" from the environment variable in app.js")])]),e._v(" "),a("p",[e._v("###Add an environment variable\nFor this we need to use the command ENV, like so:")]),e._v(" "),a("blockquote",[a("p",[e._v("ENV PORT=3000")])]),e._v(" "),a("p",[e._v("Let’s add that to our Dockerfile so it now looks like so:")]),e._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('FROM node:latest\n\nWORKDIR /app\n\nCOPY . .\n\nENV PORT=3000\n\nRUN npm install\n\nEXPOSE 3000\n\nENTRYPOINT ["node", "app.js"]\n')])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br"),a("span",{staticClass:"line-number"},[e._v("2")]),a("br"),a("span",{staticClass:"line-number"},[e._v("3")]),a("br"),a("span",{staticClass:"line-number"},[e._v("4")]),a("br"),a("span",{staticClass:"line-number"},[e._v("5")]),a("br"),a("span",{staticClass:"line-number"},[e._v("6")]),a("br"),a("span",{staticClass:"line-number"},[e._v("7")]),a("br"),a("span",{staticClass:"line-number"},[e._v("8")]),a("br"),a("span",{staticClass:"line-number"},[e._v("9")]),a("br"),a("span",{staticClass:"line-number"},[e._v("10")]),a("br"),a("span",{staticClass:"line-number"},[e._v("11")]),a("br"),a("span",{staticClass:"line-number"},[e._v("12")]),a("br"),a("span",{staticClass:"line-number"},[e._v("13")]),a("br")])]),a("p",[e._v("Let’s do one more change namely to update "),a("code",[e._v("EXPOSE")]),e._v(" to use our variable, so we git rid of static values and rely on variables instead, like so:")]),e._v(" "),a("div",{staticClass:"language- line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-text"}},[a("code",[e._v('FROM node:latest\n\nWORKDIR /app\n\nCOPY . .\n\nENV PORT=3000\n\nRUN npm install\n\nEXPOSE $PORT\n\nENTRYPOINT ["node", "app.js"]\n')])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br"),a("span",{staticClass:"line-number"},[e._v("2")]),a("br"),a("span",{staticClass:"line-number"},[e._v("3")]),a("br"),a("span",{staticClass:"line-number"},[e._v("4")]),a("br"),a("span",{staticClass:"line-number"},[e._v("5")]),a("br"),a("span",{staticClass:"line-number"},[e._v("6")]),a("br"),a("span",{staticClass:"line-number"},[e._v("7")]),a("br"),a("span",{staticClass:"line-number"},[e._v("8")]),a("br"),a("span",{staticClass:"line-number"},[e._v("9")]),a("br"),a("span",{staticClass:"line-number"},[e._v("10")]),a("br"),a("span",{staticClass:"line-number"},[e._v("11")]),a("br"),a("span",{staticClass:"line-number"},[e._v("12")]),a("br"),a("span",{staticClass:"line-number"},[e._v("13")]),a("br")])]),a("p",[e._v("Note above how we change our "),a("code",[e._v("EXPOSE")]),e._v(" command to "),a("code",[e._v("$PORT")]),e._v(", any variables we use needs to be prefixed with a "),a("code",[e._v("$")]),e._v(" character:")]),e._v(" "),a("blockquote",[a("p",[e._v("EXPOSE $PORT")])]),e._v(" "),a("h3",{attrs:{id:"read-the-environment-variable-value-in-app-js"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#read-the-environment-variable-value-in-app-js","aria-hidden":"true"}},[e._v("#")]),e._v(" Read the environment variable value in App.js")]),e._v(" "),a("p",[e._v("We can read values from environment variables in Node.js like so:")]),e._v(" "),a("blockquote",[a("p",[e._v("process.env.PORT")])]),e._v(" "),a("p",[e._v("So let’s update our app.js code to this:")]),e._v(" "),a("div",{staticClass:"language-js line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-js"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[e._v("// app.js")]),e._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("const")]),e._v(" express "),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[e._v("require")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[e._v("'express'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("const")]),e._v(" app "),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token function"}},[e._v("express")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\n\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[e._v("const")]),e._v(" port "),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=")]),e._v(" process"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),e._v("env"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),a("span",{pre:!0,attrs:{class:"token constant"}},[e._v("PORT")]),e._v("\n\napp"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[e._v("get")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[e._v("'/'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),a("span",{pre:!0,attrs:{class:"token parameter"}},[e._v("req"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" res")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=>")]),e._v(" res"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[e._v("send")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),a("span",{pre:!0,attrs:{class:"token string"}},[e._v("'Hello World!'")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\n\napp"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[e._v("listen")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),e._v("port"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(",")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[e._v("=>")]),e._v(" console"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(".")]),a("span",{pre:!0,attrs:{class:"token function"}},[e._v("log")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v("(")]),a("span",{pre:!0,attrs:{class:"token template-string"}},[a("span",{pre:!0,attrs:{class:"token string"}},[e._v("`Example app listening on port ")]),a("span",{pre:!0,attrs:{class:"token interpolation"}},[a("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[e._v("${")]),e._v("port"),a("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[e._v("}")])]),a("span",{pre:!0,attrs:{class:"token string"}},[e._v("!`")])]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[e._v(")")]),e._v("\n")])]),e._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[e._v("1")]),a("br"),a("span",{staticClass:"line-number"},[e._v("2")]),a("br"),a("span",{staticClass:"line-number"},[e._v("3")]),a("br"),a("span",{staticClass:"line-number"},[e._v("4")]),a("br"),a("span",{staticClass:"line-number"},[e._v("5")]),a("br"),a("span",{staticClass:"line-number"},[e._v("6")]),a("br"),a("span",{staticClass:"line-number"},[e._v("7")]),a("br"),a("span",{staticClass:"line-number"},[e._v("8")]),a("br"),a("span",{staticClass:"line-number"},[e._v("9")]),a("br"),a("span",{staticClass:"line-number"},[e._v("10")]),a("br")])]),a("blockquote",[a("p",[e._v("NOTE, when we do a change in our "),a("code",[e._v("app.js")]),e._v(" or our "),a("code",[e._v("Dockerfile")]),e._v(" we need to rebuild our image. That means we need to run the "),a("code",[e._v("docker build")]),e._v(" command again and prior to that we need to have torn down our container with "),a("code",[e._v("docker stop")]),e._v(" and "),a("code",[e._v("docker rm")]),e._v(". More on that in the upcoming sections.")])]),e._v(" "),a("h2",{attrs:{id:"managing-our-container"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#managing-our-container","aria-hidden":"true"}},[e._v("#")]),e._v(" Managing our container")]),e._v(" "),a("p",[e._v("Ok, so you have just started your container with "),a("code",[e._v("docker run")]),e._v(" and you notice that you can’t shut it off in the terminal. Panic sets in 😉 At this point you can go to another terminal window and do the following:")]),e._v(" "),a("blockquote",[a("p",[e._v("docker ps")])]),e._v(" "),a("p",[e._v("This will list all running containers, you will be able to see the containers name as well as its id. It should look something like this:")]),e._v(" "),a("p",[a("img",{attrs:{src:"https://thepracticaldev.s3.amazonaws.com/i/fgf7j1l5kqh4ldq7lj6t.png",alt:"alt text",title:"docker ps command"}})]),e._v(" "),a("p",[e._v("As you see above we have the column CONTAINER_ID or NAMES column, both these values will work to stop our container, cause that is what we need to do, like so:")]),e._v(" "),a("blockquote",[a("p",[e._v("docker stop f40")])]),e._v(" "),a("p",[e._v("We opt for using CONTAINER_ID and the three first digits, we don’t need more. This will effectively stop our container.")]),e._v(" "),a("h3",{attrs:{id:"daemon-mode"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#daemon-mode","aria-hidden":"true"}},[e._v("#")]),e._v(" Daemon mode")]),e._v(" "),a("p",[e._v("We can do like we did above and open a separate terminal tab but running it in Daemon mode is a better option. This means that we run the container in the background and all output from it will not be visible. To make this happen we simply add the flag "),a("code",[e._v("-d")]),e._v(" . Let’s try that out:")]),e._v(" "),a("p",[a("img",{attrs:{src:"https://thepracticaldev.s3.amazonaws.com/i/mmxo93y40frkwyu07f3a.png",alt:"alt text",title:"docker daemon command"}})]),e._v(" "),a("p",[e._v("What we get now is just the container id back, that’s all we’re ever going to see. Now it’s easier for us to just stop it if we want, by typing "),a("code",[e._v("docker stop 268")]),e._v(" , that’s the three first digits from the above id.")]),e._v(" "),a("h3",{attrs:{id:"interactive-mode"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#interactive-mode","aria-hidden":"true"}},[e._v("#")]),e._v(" Interactive mode")]),e._v(" "),a("p",[e._v("Interactive mode is an interesting one, this allows us to step into a running container and list files, or add/remove files or just about anything we can do for example bash. For this, we need the command "),a("code",[e._v("docker exec")]),e._v(", like so:")]),e._v(" "),a("p",[a("img",{attrs:{src:"https://thepracticaldev.s3.amazonaws.com/i/6c531sswq50k5j5c9fl5.png",alt:"alt text",title:"docker interactive command"}})]),e._v(" "),a("p",[e._v("Above we run the command:")]),e._v(" "),a("blockquote",[a("p",[e._v("docker exec -it 268 bash")])]),e._v(" "),a("p",[e._v("NOTE, the container needs to be up and running. If you've stopped it previously you should start it with "),a("code",[e._v("docker start 268")]),e._v(". Replace "),a("code",[e._v("268")]),e._v(" with whatever id you got when it was created when you typed "),a("code",[e._v("docker run")]),e._v(".")]),e._v(" "),a("p",[a("code",[e._v("268")]),e._v(" is the three first digits if our container and "),a("code",[e._v("-it")]),e._v(" means interactive mode and our argument bash at the end means we will run a bash shell.")]),e._v(" "),a("p",[e._v("We also run the command "),a("code",[e._v("ls")]),e._v(", once we get the bash shell up and running so that means we can easily list what’s in the container so we can verify we built it correctly but it’s a good way to debug as well.")]),e._v(" "),a("p",[e._v("If we just want to run something on the container like a node command, for example, we can type:")]),e._v(" "),a("blockquote",[a("p",[e._v("docker exec 268 node app.js")])]),e._v(" "),a("p",[e._v("that will run the command "),a("code",[e._v("node app.js")]),e._v(" in the container")]),e._v(" "),a("h3",{attrs:{id:"docker-kill-vs-docker-stop"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#docker-kill-vs-docker-stop","aria-hidden":"true"}},[e._v("#")]),e._v(" Docker kill vs Docker stop")]),e._v(" "),a("p",[e._v("So far we have been using "),a("code",[e._v("docker stop")]),e._v(" as way to stop the container. There is another way of stopping the container namely "),a("code",[e._v("docker kill")]),e._v(" , so what is the difference?")]),e._v(" "),a("ul",[a("li",[a("strong",[e._v("docker stop")]),e._v(", this sends the signal "),a("strong",[e._v("SIGTERM")]),e._v(" followed by "),a("strong",[e._v("SIGKILL")]),e._v(" after a grace period. In short, this is a way to bring down the container in a more graceful way meaning it gets to release resources and saving state.")]),e._v(" "),a("li",[a("strong",[e._v("docker kill")]),e._v(", this sends "),a("strong",[e._v("SIGKILL")]),e._v(" right away. This means resource release or state save might not work as intended. In development, it doesn’t really matter which one of the two commands are being used but in a production scenario it probably wiser to rely on "),a("code",[e._v("docker stop")])])]),e._v(" "),a("p",[e._v("###Cleaning up\nDuring the course of development you will end up creating tons of container so ensure you clean up by typing:")]),e._v(" "),a("blockquote",[a("p",[e._v("docker rm id-of-container")])]),e._v(" "),a("h2",{attrs:{id:"summary"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#summary","aria-hidden":"true"}},[e._v("#")]),e._v(" Summary")]),e._v(" "),a("p",[e._v("Ok, so we have explained Docker from the beginning. We’ve covered motivations for using it and the basic concepts. Furthermore, we’ve looked into how to Dockerize an app and in doing so covered some useful Docker commands. There is so much more to know about Docker like how to work with Databases, Volumes, how to link containers and why and how to spin up and manage multiple containers, also known as orchestration.")]),e._v(" "),a("p",[e._v("But this is a series of articles, we have to stop somewhere or this article will be very long. Stay tuned for the next part where we will talk about Volumes and Databases.")]),e._v(" "),a("h3",{attrs:{id:"acknowledgments"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#acknowledgments","aria-hidden":"true"}},[e._v("#")]),e._v(" Acknowledgments")]),e._v(" "),a("p",[e._v("Thank you "),a("a",{attrs:{href:"https://twitter.com/DanWahlin",target:"_blank",rel:"noopener noreferrer"}},[e._v("Dan Wahlin Twitter"),a("OutboundLink")],1),e._v(" for your amazing course on Docker, a lot of things Docker clicked for me because of your course")]),e._v(" "),a("p",[e._v("Follow me on "),a("a",{attrs:{href:"https://twitter.com/chris_noring",target:"_blank",rel:"noopener noreferrer"}},[e._v("Twitter"),a("OutboundLink")],1),e._v(", I’m happy to answer your queries and questions and suggestions for topics.")])])},[],!1,null,null,null);t.default=s.exports}}]);